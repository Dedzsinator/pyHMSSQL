{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/src/runtime/internal/utils.js","../../node_modules/svelte/src/runtime/internal/dom.js","../../node_modules/svelte/src/runtime/internal/lifecycle.js","../../node_modules/svelte/src/runtime/internal/scheduler.js","../../node_modules/svelte/src/runtime/internal/transitions.js","../../node_modules/svelte/src/runtime/internal/each.js","../../node_modules/svelte/src/runtime/internal/Component.js","../../src/components/ClusterOverview.svelte","../../node_modules/svelte/src/runtime/internal/disclose-version/index.js","../../node_modules/svelte/src/shared/version.js","../../src/components/NodeGrid.svelte","../../src/components/MetricsPanel.svelte","../../src/components/TopologyGraph.svelte","../../src/components/LogViewer.svelte","../../src/App.svelte","../../src/main.js"],"sourcesContent":["/** @returns {void} */\nexport function noop() {}\n\nexport const identity = (x) => x;\n\n/**\n * @template T\n * @template S\n * @param {T} tar\n * @param {S} src\n * @returns {T & S}\n */\nexport function assign(tar, src) {\n\t// @ts-ignore\n\tfor (const k in src) tar[k] = src[k];\n\treturn /** @type {T & S} */ (tar);\n}\n\n// Adapted from https://github.com/then/is-promise/blob/master/index.js\n// Distributed under MIT License https://github.com/then/is-promise/blob/master/LICENSE\n/**\n * @param {any} value\n * @returns {value is PromiseLike<any>}\n */\nexport function is_promise(value) {\n\treturn (\n\t\t!!value &&\n\t\t(typeof value === 'object' || typeof value === 'function') &&\n\t\ttypeof (/** @type {any} */ (value).then) === 'function'\n\t);\n}\n\n/** @returns {void} */\nexport function add_location(element, file, line, column, char) {\n\telement.__svelte_meta = {\n\t\tloc: { file, line, column, char }\n\t};\n}\n\nexport function run(fn) {\n\treturn fn();\n}\n\nexport function blank_object() {\n\treturn Object.create(null);\n}\n\n/**\n * @param {Function[]} fns\n * @returns {void}\n */\nexport function run_all(fns) {\n\tfns.forEach(run);\n}\n\n/**\n * @param {any} thing\n * @returns {thing is Function}\n */\nexport function is_function(thing) {\n\treturn typeof thing === 'function';\n}\n\n/** @returns {boolean} */\nexport function safe_not_equal(a, b) {\n\treturn a != a ? b == b : a !== b || (a && typeof a === 'object') || typeof a === 'function';\n}\n\nlet src_url_equal_anchor;\n\n/**\n * @param {string} element_src\n * @param {string} url\n * @returns {boolean}\n */\nexport function src_url_equal(element_src, url) {\n\tif (element_src === url) return true;\n\tif (!src_url_equal_anchor) {\n\t\tsrc_url_equal_anchor = document.createElement('a');\n\t}\n\t// This is actually faster than doing URL(..).href\n\tsrc_url_equal_anchor.href = url;\n\treturn element_src === src_url_equal_anchor.href;\n}\n\n/** @param {string} srcset */\nfunction split_srcset(srcset) {\n\treturn srcset.split(',').map((src) => src.trim().split(' ').filter(Boolean));\n}\n\n/**\n * @param {HTMLSourceElement | HTMLImageElement} element_srcset\n * @param {string | undefined | null} srcset\n * @returns {boolean}\n */\nexport function srcset_url_equal(element_srcset, srcset) {\n\tconst element_urls = split_srcset(element_srcset.srcset);\n\tconst urls = split_srcset(srcset || '');\n\n\treturn (\n\t\turls.length === element_urls.length &&\n\t\turls.every(\n\t\t\t([url, width], i) =>\n\t\t\t\twidth === element_urls[i][1] &&\n\t\t\t\t// We need to test both ways because Vite will create an a full URL with\n\t\t\t\t// `new URL(asset, import.meta.url).href` for the client when `base: './'`, and the\n\t\t\t\t// relative URLs inside srcset are not automatically resolved to absolute URLs by\n\t\t\t\t// browsers (in contrast to img.src). This means both SSR and DOM code could\n\t\t\t\t// contain relative or absolute URLs.\n\t\t\t\t(src_url_equal(element_urls[i][0], url) || src_url_equal(url, element_urls[i][0]))\n\t\t)\n\t);\n}\n\n/** @returns {boolean} */\nexport function not_equal(a, b) {\n\treturn a != a ? b == b : a !== b;\n}\n\n/** @returns {boolean} */\nexport function is_empty(obj) {\n\treturn Object.keys(obj).length === 0;\n}\n\n/** @returns {void} */\nexport function validate_store(store, name) {\n\tif (store != null && typeof store.subscribe !== 'function') {\n\t\tthrow new Error(`'${name}' is not a store with a 'subscribe' method`);\n\t}\n}\n\nexport function subscribe(store, ...callbacks) {\n\tif (store == null) {\n\t\tfor (const callback of callbacks) {\n\t\t\tcallback(undefined);\n\t\t}\n\t\treturn noop;\n\t}\n\tconst unsub = store.subscribe(...callbacks);\n\treturn unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\n\n/**\n * Get the current value from a store by subscribing and immediately unsubscribing.\n *\n * https://svelte.dev/docs/svelte-store#get\n * @template T\n * @param {import('../store/public.js').Readable<T>} store\n * @returns {T}\n */\nexport function get_store_value(store) {\n\tlet value;\n\tsubscribe(store, (_) => (value = _))();\n\treturn value;\n}\n\n/** @returns {void} */\nexport function component_subscribe(component, store, callback) {\n\tcomponent.$$.on_destroy.push(subscribe(store, callback));\n}\n\nexport function create_slot(definition, ctx, $$scope, fn) {\n\tif (definition) {\n\t\tconst slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n\t\treturn definition[0](slot_ctx);\n\t}\n}\n\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n\treturn definition[1] && fn ? assign($$scope.ctx.slice(), definition[1](fn(ctx))) : $$scope.ctx;\n}\n\nexport function get_slot_changes(definition, $$scope, dirty, fn) {\n\tif (definition[2] && fn) {\n\t\tconst lets = definition[2](fn(dirty));\n\t\tif ($$scope.dirty === undefined) {\n\t\t\treturn lets;\n\t\t}\n\t\tif (typeof lets === 'object') {\n\t\t\tconst merged = [];\n\t\t\tconst len = Math.max($$scope.dirty.length, lets.length);\n\t\t\tfor (let i = 0; i < len; i += 1) {\n\t\t\t\tmerged[i] = $$scope.dirty[i] | lets[i];\n\t\t\t}\n\t\t\treturn merged;\n\t\t}\n\t\treturn $$scope.dirty | lets;\n\t}\n\treturn $$scope.dirty;\n}\n\n/** @returns {void} */\nexport function update_slot_base(\n\tslot,\n\tslot_definition,\n\tctx,\n\t$$scope,\n\tslot_changes,\n\tget_slot_context_fn\n) {\n\tif (slot_changes) {\n\t\tconst slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n\t\tslot.p(slot_context, slot_changes);\n\t}\n}\n\n/** @returns {void} */\nexport function update_slot(\n\tslot,\n\tslot_definition,\n\tctx,\n\t$$scope,\n\tdirty,\n\tget_slot_changes_fn,\n\tget_slot_context_fn\n) {\n\tconst slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n\tupdate_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\n\n/** @returns {any[] | -1} */\nexport function get_all_dirty_from_scope($$scope) {\n\tif ($$scope.ctx.length > 32) {\n\t\tconst dirty = [];\n\t\tconst length = $$scope.ctx.length / 32;\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tdirty[i] = -1;\n\t\t}\n\t\treturn dirty;\n\t}\n\treturn -1;\n}\n\n/** @returns {{}} */\nexport function exclude_internal_props(props) {\n\tconst result = {};\n\tfor (const k in props) if (k[0] !== '$') result[k] = props[k];\n\treturn result;\n}\n\n/** @returns {{}} */\nexport function compute_rest_props(props, keys) {\n\tconst rest = {};\n\tkeys = new Set(keys);\n\tfor (const k in props) if (!keys.has(k) && k[0] !== '$') rest[k] = props[k];\n\treturn rest;\n}\n\n/** @returns {{}} */\nexport function compute_slots(slots) {\n\tconst result = {};\n\tfor (const key in slots) {\n\t\tresult[key] = true;\n\t}\n\treturn result;\n}\n\n/** @returns {(this: any, ...args: any[]) => void} */\nexport function once(fn) {\n\tlet ran = false;\n\treturn function (...args) {\n\t\tif (ran) return;\n\t\tran = true;\n\t\tfn.call(this, ...args);\n\t};\n}\n\nexport function null_to_empty(value) {\n\treturn value == null ? '' : value;\n}\n\nexport function set_store_value(store, ret, value) {\n\tstore.set(value);\n\treturn ret;\n}\n\nexport const has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\n\nexport function action_destroyer(action_result) {\n\treturn action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\n/** @param {number | string} value\n * @returns {[number, string]}\n */\nexport function split_css_unit(value) {\n\tconst split = typeof value === 'string' && value.match(/^\\s*(-?[\\d.]+)([^\\s]*)\\s*$/);\n\treturn split ? [parseFloat(split[1]), split[2] || 'px'] : [/** @type {number} */ (value), 'px'];\n}\n\nexport const contenteditable_truthy_values = ['', true, 1, 'true', 'contenteditable'];\n","import { contenteditable_truthy_values, has_prop } from './utils.js';\n\nimport { ResizeObserverSingleton } from './ResizeObserverSingleton.js';\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\n\n/**\n * @returns {void}\n */\nexport function start_hydrating() {\n\tis_hydrating = true;\n}\n\n/**\n * @returns {void}\n */\nexport function end_hydrating() {\n\tis_hydrating = false;\n}\n\n/**\n * @param {number} low\n * @param {number} high\n * @param {(index: number) => number} key\n * @param {number} value\n * @returns {number}\n */\nfunction upper_bound(low, high, key, value) {\n\t// Return first index of value larger than input value in the range [low, high)\n\twhile (low < high) {\n\t\tconst mid = low + ((high - low) >> 1);\n\t\tif (key(mid) <= value) {\n\t\t\tlow = mid + 1;\n\t\t} else {\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\n\n/**\n * @param {NodeEx} target\n * @returns {void}\n */\nfunction init_hydrate(target) {\n\tif (target.hydrate_init) return;\n\ttarget.hydrate_init = true;\n\t// We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n\n\tlet children = /** @type {ArrayLike<NodeEx2>} */ (target.childNodes);\n\t// If target is <head>, there may be children without claim_order\n\tif (target.nodeName === 'HEAD') {\n\t\tconst my_children = [];\n\t\tfor (let i = 0; i < children.length; i++) {\n\t\t\tconst node = children[i];\n\t\t\tif (node.claim_order !== undefined) {\n\t\t\t\tmy_children.push(node);\n\t\t\t}\n\t\t}\n\t\tchildren = my_children;\n\t}\n\t/*\n\t * Reorder claimed children optimally.\n\t * We can reorder claimed children optimally by finding the longest subsequence of\n\t * nodes that are already claimed in order and only moving the rest. The longest\n\t * subsequence of nodes that are claimed in order can be found by\n\t * computing the longest increasing subsequence of .claim_order values.\n\t *\n\t * This algorithm is optimal in generating the least amount of reorder operations\n\t * possible.\n\t *\n\t * Proof:\n\t * We know that, given a set of reordering operations, the nodes that do not move\n\t * always form an increasing subsequence, since they do not move among each other\n\t * meaning that they must be already ordered among each other. Thus, the maximal\n\t * set of nodes that do not move form a longest increasing subsequence.\n\t */\n\t// Compute longest increasing subsequence\n\t// m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n\tconst m = new Int32Array(children.length + 1);\n\t// Predecessor indices + 1\n\tconst p = new Int32Array(children.length);\n\tm[0] = -1;\n\tlet longest = 0;\n\tfor (let i = 0; i < children.length; i++) {\n\t\tconst current = children[i].claim_order;\n\t\t// Find the largest subsequence length such that it ends in a value less than our current value\n\t\t// upper_bound returns first greater value, so we subtract one\n\t\t// with fast path for when we are on the current longest subsequence\n\t\tconst seq_len =\n\t\t\t(longest > 0 && children[m[longest]].claim_order <= current\n\t\t\t\t? longest + 1\n\t\t\t\t: upper_bound(1, longest, (idx) => children[m[idx]].claim_order, current)) - 1;\n\t\tp[i] = m[seq_len] + 1;\n\t\tconst new_len = seq_len + 1;\n\t\t// We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n\t\tm[new_len] = i;\n\t\tlongest = Math.max(new_len, longest);\n\t}\n\t// The longest increasing subsequence of nodes (initially reversed)\n\n\t/**\n\t * @type {NodeEx2[]}\n\t */\n\tconst lis = [];\n\t// The rest of the nodes, nodes that will be moved\n\n\t/**\n\t * @type {NodeEx2[]}\n\t */\n\tconst to_move = [];\n\tlet last = children.length - 1;\n\tfor (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n\t\tlis.push(children[cur - 1]);\n\t\tfor (; last >= cur; last--) {\n\t\t\tto_move.push(children[last]);\n\t\t}\n\t\tlast--;\n\t}\n\tfor (; last >= 0; last--) {\n\t\tto_move.push(children[last]);\n\t}\n\tlis.reverse();\n\t// We sort the nodes being moved to guarantee that their insertion order matches the claim order\n\tto_move.sort((a, b) => a.claim_order - b.claim_order);\n\t// Finally, we move the nodes\n\tfor (let i = 0, j = 0; i < to_move.length; i++) {\n\t\twhile (j < lis.length && to_move[i].claim_order >= lis[j].claim_order) {\n\t\t\tj++;\n\t\t}\n\t\tconst anchor = j < lis.length ? lis[j] : null;\n\t\ttarget.insertBefore(to_move[i], anchor);\n\t}\n}\n\n/**\n * @param {Node} target\n * @param {Node} node\n * @returns {void}\n */\nexport function append(target, node) {\n\ttarget.appendChild(node);\n}\n\n/**\n * @param {Node} target\n * @param {string} style_sheet_id\n * @param {string} styles\n * @returns {void}\n */\nexport function append_styles(target, style_sheet_id, styles) {\n\tconst append_styles_to = get_root_for_style(target);\n\tif (!append_styles_to.getElementById(style_sheet_id)) {\n\t\tconst style = element('style');\n\t\tstyle.id = style_sheet_id;\n\t\tstyle.textContent = styles;\n\t\tappend_stylesheet(append_styles_to, style);\n\t}\n}\n\n/**\n * @param {Node} node\n * @returns {ShadowRoot | Document}\n */\nexport function get_root_for_style(node) {\n\tif (!node) return document;\n\tconst root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n\tif (root && /** @type {ShadowRoot} */ (root).host) {\n\t\treturn /** @type {ShadowRoot} */ (root);\n\t}\n\treturn node.ownerDocument;\n}\n\n/**\n * @param {Node} node\n * @returns {CSSStyleSheet}\n */\nexport function append_empty_stylesheet(node) {\n\tconst style_element = element('style');\n\t// For transitions to work without 'style-src: unsafe-inline' Content Security Policy,\n\t// these empty tags need to be allowed with a hash as a workaround until we move to the Web Animations API.\n\t// Using the hash for the empty string (for an empty tag) works in all browsers except Safari.\n\t// So as a workaround for the workaround, when we append empty style tags we set their content to /* empty */.\n\t// The hash 'sha256-9OlNO0DNEeaVzHL4RZwCLsBHA8WBQ8toBp/4F5XV2nc=' will then work even in Safari.\n\tstyle_element.textContent = '/* empty */';\n\tappend_stylesheet(get_root_for_style(node), style_element);\n\treturn style_element.sheet;\n}\n\n/**\n * @param {ShadowRoot | Document} node\n * @param {HTMLStyleElement} style\n * @returns {CSSStyleSheet}\n */\nfunction append_stylesheet(node, style) {\n\tappend(/** @type {Document} */ (node).head || node, style);\n\treturn style.sheet;\n}\n\n/**\n * @param {NodeEx} target\n * @param {NodeEx} node\n * @returns {void}\n */\nexport function append_hydration(target, node) {\n\tif (is_hydrating) {\n\t\tinit_hydrate(target);\n\t\tif (\n\t\t\ttarget.actual_end_child === undefined ||\n\t\t\t(target.actual_end_child !== null && target.actual_end_child.parentNode !== target)\n\t\t) {\n\t\t\ttarget.actual_end_child = target.firstChild;\n\t\t}\n\t\t// Skip nodes of undefined ordering\n\t\twhile (target.actual_end_child !== null && target.actual_end_child.claim_order === undefined) {\n\t\t\ttarget.actual_end_child = target.actual_end_child.nextSibling;\n\t\t}\n\t\tif (node !== target.actual_end_child) {\n\t\t\t// We only insert if the ordering of this node should be modified or the parent node is not target\n\t\t\tif (node.claim_order !== undefined || node.parentNode !== target) {\n\t\t\t\ttarget.insertBefore(node, target.actual_end_child);\n\t\t\t}\n\t\t} else {\n\t\t\ttarget.actual_end_child = node.nextSibling;\n\t\t}\n\t} else if (node.parentNode !== target || node.nextSibling !== null) {\n\t\ttarget.appendChild(node);\n\t}\n}\n\n/**\n * @param {Node} target\n * @param {Node} node\n * @param {Node} [anchor]\n * @returns {void}\n */\nexport function insert(target, node, anchor) {\n\ttarget.insertBefore(node, anchor || null);\n}\n\n/**\n * @param {NodeEx} target\n * @param {NodeEx} node\n * @param {NodeEx} [anchor]\n * @returns {void}\n */\nexport function insert_hydration(target, node, anchor) {\n\tif (is_hydrating && !anchor) {\n\t\tappend_hydration(target, node);\n\t} else if (node.parentNode !== target || node.nextSibling != anchor) {\n\t\ttarget.insertBefore(node, anchor || null);\n\t}\n}\n\n/**\n * @param {Node} node\n * @returns {void}\n */\nexport function detach(node) {\n\tif (node.parentNode) {\n\t\tnode.parentNode.removeChild(node);\n\t}\n}\n\n/**\n * @returns {void} */\nexport function destroy_each(iterations, detaching) {\n\tfor (let i = 0; i < iterations.length; i += 1) {\n\t\tif (iterations[i]) iterations[i].d(detaching);\n\t}\n}\n\n/**\n * @template {keyof HTMLElementTagNameMap} K\n * @param {K} name\n * @returns {HTMLElementTagNameMap[K]}\n */\nexport function element(name) {\n\treturn document.createElement(name);\n}\n\n/**\n * @template {keyof HTMLElementTagNameMap} K\n * @param {K} name\n * @param {string} is\n * @returns {HTMLElementTagNameMap[K]}\n */\nexport function element_is(name, is) {\n\treturn document.createElement(name, { is });\n}\n\n/**\n * @template T\n * @template {keyof T} K\n * @param {T} obj\n * @param {K[]} exclude\n * @returns {Pick<T, Exclude<keyof T, K>>}\n */\nexport function object_without_properties(obj, exclude) {\n\tconst target = /** @type {Pick<T, Exclude<keyof T, K>>} */ ({});\n\tfor (const k in obj) {\n\t\tif (\n\t\t\thas_prop(obj, k) &&\n\t\t\t// @ts-ignore\n\t\t\texclude.indexOf(k) === -1\n\t\t) {\n\t\t\t// @ts-ignore\n\t\t\ttarget[k] = obj[k];\n\t\t}\n\t}\n\treturn target;\n}\n\n/**\n * @template {keyof SVGElementTagNameMap} K\n * @param {K} name\n * @returns {SVGElement}\n */\nexport function svg_element(name) {\n\treturn document.createElementNS('http://www.w3.org/2000/svg', name);\n}\n\n/**\n * @param {string} data\n * @returns {Text}\n */\nexport function text(data) {\n\treturn document.createTextNode(data);\n}\n\n/**\n * @returns {Text} */\nexport function space() {\n\treturn text(' ');\n}\n\n/**\n * @returns {Text} */\nexport function empty() {\n\treturn text('');\n}\n\n/**\n * @param {string} content\n * @returns {Comment}\n */\nexport function comment(content) {\n\treturn document.createComment(content);\n}\n\n/**\n * @param {EventTarget} node\n * @param {string} event\n * @param {EventListenerOrEventListenerObject} handler\n * @param {boolean | AddEventListenerOptions | EventListenerOptions} [options]\n * @returns {() => void}\n */\nexport function listen(node, event, handler, options) {\n\tnode.addEventListener(event, handler, options);\n\treturn () => node.removeEventListener(event, handler, options);\n}\n\n/**\n * @returns {(event: any) => any} */\nexport function prevent_default(fn) {\n\treturn function (event) {\n\t\tevent.preventDefault();\n\t\t// @ts-ignore\n\t\treturn fn.call(this, event);\n\t};\n}\n\n/**\n * @returns {(event: any) => any} */\nexport function stop_propagation(fn) {\n\treturn function (event) {\n\t\tevent.stopPropagation();\n\t\t// @ts-ignore\n\t\treturn fn.call(this, event);\n\t};\n}\n\n/**\n * @returns {(event: any) => any} */\nexport function stop_immediate_propagation(fn) {\n\treturn function (event) {\n\t\tevent.stopImmediatePropagation();\n\t\t// @ts-ignore\n\t\treturn fn.call(this, event);\n\t};\n}\n\n/**\n * @returns {(event: any) => void} */\nexport function self(fn) {\n\treturn function (event) {\n\t\t// @ts-ignore\n\t\tif (event.target === this) fn.call(this, event);\n\t};\n}\n\n/**\n * @returns {(event: any) => void} */\nexport function trusted(fn) {\n\treturn function (event) {\n\t\t// @ts-ignore\n\t\tif (event.isTrusted) fn.call(this, event);\n\t};\n}\n\n/**\n * @param {Element} node\n * @param {string} attribute\n * @param {string} [value]\n * @returns {void}\n */\nexport function attr(node, attribute, value) {\n\tif (value == null) node.removeAttribute(attribute);\n\telse if (node.getAttribute(attribute) !== value) node.setAttribute(attribute, value);\n}\n/**\n * List of attributes that should always be set through the attr method,\n * because updating them through the property setter doesn't work reliably.\n * In the example of `width`/`height`, the problem is that the setter only\n * accepts numeric values, but the attribute can also be set to a string like `50%`.\n * If this list becomes too big, rethink this approach.\n */\nconst always_set_through_set_attribute = ['width', 'height'];\n\n/**\n * @param {Element & ElementCSSInlineStyle} node\n * @param {{ [x: string]: string }} attributes\n * @returns {void}\n */\nexport function set_attributes(node, attributes) {\n\t// @ts-ignore\n\tconst descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n\tfor (const key in attributes) {\n\t\tif (attributes[key] == null) {\n\t\t\tnode.removeAttribute(key);\n\t\t} else if (key === 'style') {\n\t\t\tnode.style.cssText = attributes[key];\n\t\t} else if (key === '__value') {\n\t\t\t/** @type {any} */ (node).value = node[key] = attributes[key];\n\t\t} else if (\n\t\t\tdescriptors[key] &&\n\t\t\tdescriptors[key].set &&\n\t\t\talways_set_through_set_attribute.indexOf(key) === -1\n\t\t) {\n\t\t\tnode[key] = attributes[key];\n\t\t} else {\n\t\t\tattr(node, key, attributes[key]);\n\t\t}\n\t}\n}\n\n/**\n * @param {Element & ElementCSSInlineStyle} node\n * @param {{ [x: string]: string }} attributes\n * @returns {void}\n */\nexport function set_svg_attributes(node, attributes) {\n\tfor (const key in attributes) {\n\t\tattr(node, key, attributes[key]);\n\t}\n}\n\n/**\n * @param {Record<string, unknown>} data_map\n * @returns {void}\n */\nexport function set_custom_element_data_map(node, data_map) {\n\tObject.keys(data_map).forEach((key) => {\n\t\tset_custom_element_data(node, key, data_map[key]);\n\t});\n}\n\n/**\n * @returns {void} */\nexport function set_custom_element_data(node, prop, value) {\n\tconst lower = prop.toLowerCase(); // for backwards compatibility with existing behavior we do lowercase first\n\tif (lower in node) {\n\t\tnode[lower] = typeof node[lower] === 'boolean' && value === '' ? true : value;\n\t} else if (prop in node) {\n\t\tnode[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n\t} else {\n\t\tattr(node, prop, value);\n\t}\n}\n\n/**\n * @param {string} tag\n */\nexport function set_dynamic_element_data(tag) {\n\treturn /-/.test(tag) ? set_custom_element_data_map : set_attributes;\n}\n\n/**\n * @returns {void}\n */\nexport function xlink_attr(node, attribute, value) {\n\tnode.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\n\n/**\n * @param {HTMLElement} node\n * @returns {string}\n */\nexport function get_svelte_dataset(node) {\n\treturn node.dataset.svelteH;\n}\n\n/**\n * @returns {unknown[]} */\nexport function get_binding_group_value(group, __value, checked) {\n\tconst value = new Set();\n\tfor (let i = 0; i < group.length; i += 1) {\n\t\tif (group[i].checked) value.add(group[i].__value);\n\t}\n\tif (!checked) {\n\t\tvalue.delete(__value);\n\t}\n\treturn Array.from(value);\n}\n\n/**\n * @param {HTMLInputElement[]} group\n * @returns {{ p(...inputs: HTMLInputElement[]): void; r(): void; }}\n */\nexport function init_binding_group(group) {\n\t/**\n\t * @type {HTMLInputElement[]} */\n\tlet _inputs;\n\treturn {\n\t\t/* push */ p(...inputs) {\n\t\t\t_inputs = inputs;\n\t\t\t_inputs.forEach((input) => group.push(input));\n\t\t},\n\t\t/* remove */ r() {\n\t\t\t_inputs.forEach((input) => group.splice(group.indexOf(input), 1));\n\t\t}\n\t};\n}\n\n/**\n * @param {number[]} indexes\n * @returns {{ u(new_indexes: number[]): void; p(...inputs: HTMLInputElement[]): void; r: () => void; }}\n */\nexport function init_binding_group_dynamic(group, indexes) {\n\t/**\n\t * @type {HTMLInputElement[]} */\n\tlet _group = get_binding_group(group);\n\n\t/**\n\t * @type {HTMLInputElement[]} */\n\tlet _inputs;\n\n\tfunction get_binding_group(group) {\n\t\tfor (let i = 0; i < indexes.length; i++) {\n\t\t\tgroup = group[indexes[i]] = group[indexes[i]] || [];\n\t\t}\n\t\treturn group;\n\t}\n\n\t/**\n\t * @returns {void} */\n\tfunction push() {\n\t\t_inputs.forEach((input) => _group.push(input));\n\t}\n\n\t/**\n\t * @returns {void} */\n\tfunction remove() {\n\t\t_inputs.forEach((input) => _group.splice(_group.indexOf(input), 1));\n\t}\n\treturn {\n\t\t/* update */ u(new_indexes) {\n\t\t\tindexes = new_indexes;\n\t\t\tconst new_group = get_binding_group(group);\n\t\t\tif (new_group !== _group) {\n\t\t\t\tremove();\n\t\t\t\t_group = new_group;\n\t\t\t\tpush();\n\t\t\t}\n\t\t},\n\t\t/* push */ p(...inputs) {\n\t\t\t_inputs = inputs;\n\t\t\tpush();\n\t\t},\n\t\t/* remove */ r: remove\n\t};\n}\n\n/** @returns {number} */\nexport function to_number(value) {\n\treturn value === '' ? null : +value;\n}\n\n/** @returns {any[]} */\nexport function time_ranges_to_array(ranges) {\n\tconst array = [];\n\tfor (let i = 0; i < ranges.length; i += 1) {\n\t\tarray.push({ start: ranges.start(i), end: ranges.end(i) });\n\t}\n\treturn array;\n}\n\n/**\n * @param {Element} element\n * @returns {ChildNode[]}\n */\nexport function children(element) {\n\treturn Array.from(element.childNodes);\n}\n\n/**\n * @param {ChildNodeArray} nodes\n * @returns {void}\n */\nfunction init_claim_info(nodes) {\n\tif (nodes.claim_info === undefined) {\n\t\tnodes.claim_info = { last_index: 0, total_claimed: 0 };\n\t}\n}\n\n/**\n * @template {ChildNodeEx} R\n * @param {ChildNodeArray} nodes\n * @param {(node: ChildNodeEx) => node is R} predicate\n * @param {(node: ChildNodeEx) => ChildNodeEx | undefined} process_node\n * @param {() => R} create_node\n * @param {boolean} dont_update_last_index\n * @returns {R}\n */\nfunction claim_node(nodes, predicate, process_node, create_node, dont_update_last_index = false) {\n\t// Try to find nodes in an order such that we lengthen the longest increasing subsequence\n\tinit_claim_info(nodes);\n\tconst result_node = (() => {\n\t\t// We first try to find an element after the previous one\n\t\tfor (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n\t\t\tconst node = nodes[i];\n\t\t\tif (predicate(node)) {\n\t\t\t\tconst replacement = process_node(node);\n\t\t\t\tif (replacement === undefined) {\n\t\t\t\t\tnodes.splice(i, 1);\n\t\t\t\t} else {\n\t\t\t\t\tnodes[i] = replacement;\n\t\t\t\t}\n\t\t\t\tif (!dont_update_last_index) {\n\t\t\t\t\tnodes.claim_info.last_index = i;\n\t\t\t\t}\n\t\t\t\treturn node;\n\t\t\t}\n\t\t}\n\t\t// Otherwise, we try to find one before\n\t\t// We iterate in reverse so that we don't go too far back\n\t\tfor (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n\t\t\tconst node = nodes[i];\n\t\t\tif (predicate(node)) {\n\t\t\t\tconst replacement = process_node(node);\n\t\t\t\tif (replacement === undefined) {\n\t\t\t\t\tnodes.splice(i, 1);\n\t\t\t\t} else {\n\t\t\t\t\tnodes[i] = replacement;\n\t\t\t\t}\n\t\t\t\tif (!dont_update_last_index) {\n\t\t\t\t\tnodes.claim_info.last_index = i;\n\t\t\t\t} else if (replacement === undefined) {\n\t\t\t\t\t// Since we spliced before the last_index, we decrease it\n\t\t\t\t\tnodes.claim_info.last_index--;\n\t\t\t\t}\n\t\t\t\treturn node;\n\t\t\t}\n\t\t}\n\t\t// If we can't find any matching node, we create a new one\n\t\treturn create_node();\n\t})();\n\tresult_node.claim_order = nodes.claim_info.total_claimed;\n\tnodes.claim_info.total_claimed += 1;\n\treturn result_node;\n}\n\n/**\n * @param {ChildNodeArray} nodes\n * @param {string} name\n * @param {{ [key: string]: boolean }} attributes\n * @param {(name: string) => Element | SVGElement} create_element\n * @returns {Element | SVGElement}\n */\nfunction claim_element_base(nodes, name, attributes, create_element) {\n\treturn claim_node(\n\t\tnodes,\n\t\t/** @returns {node is Element | SVGElement} */\n\t\t(node) => node.nodeName === name,\n\t\t/** @param {Element} node */\n\t\t(node) => {\n\t\t\tconst remove = [];\n\t\t\tfor (let j = 0; j < node.attributes.length; j++) {\n\t\t\t\tconst attribute = node.attributes[j];\n\t\t\t\tif (!attributes[attribute.name]) {\n\t\t\t\t\tremove.push(attribute.name);\n\t\t\t\t}\n\t\t\t}\n\t\t\tremove.forEach((v) => node.removeAttribute(v));\n\t\t\treturn undefined;\n\t\t},\n\t\t() => create_element(name)\n\t);\n}\n\n/**\n * @param {ChildNodeArray} nodes\n * @param {string} name\n * @param {{ [key: string]: boolean }} attributes\n * @returns {Element | SVGElement}\n */\nexport function claim_element(nodes, name, attributes) {\n\treturn claim_element_base(nodes, name, attributes, element);\n}\n\n/**\n * @param {ChildNodeArray} nodes\n * @param {string} name\n * @param {{ [key: string]: boolean }} attributes\n * @returns {Element | SVGElement}\n */\nexport function claim_svg_element(nodes, name, attributes) {\n\treturn claim_element_base(nodes, name, attributes, svg_element);\n}\n\n/**\n * @param {ChildNodeArray} nodes\n * @returns {Text}\n */\nexport function claim_text(nodes, data) {\n\treturn claim_node(\n\t\tnodes,\n\t\t/** @returns {node is Text} */\n\t\t(node) => node.nodeType === 3,\n\t\t/** @param {Text} node */\n\t\t(node) => {\n\t\t\tconst data_str = '' + data;\n\t\t\tif (node.data.startsWith(data_str)) {\n\t\t\t\tif (node.data.length !== data_str.length) {\n\t\t\t\t\treturn node.splitText(data_str.length);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnode.data = data_str;\n\t\t\t}\n\t\t},\n\t\t() => text(data),\n\t\ttrue // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n\t);\n}\n\n/**\n * @returns {Text} */\nexport function claim_space(nodes) {\n\treturn claim_text(nodes, ' ');\n}\n\n/**\n * @param {ChildNodeArray} nodes\n * @returns {Comment}\n */\nexport function claim_comment(nodes, data) {\n\treturn claim_node(\n\t\tnodes,\n\t\t/** @returns {node is Comment} */\n\t\t(node) => node.nodeType === 8,\n\t\t/** @param {Comment} node */\n\t\t(node) => {\n\t\t\tnode.data = '' + data;\n\t\t\treturn undefined;\n\t\t},\n\t\t() => comment(data),\n\t\ttrue\n\t);\n}\n\nfunction get_comment_idx(nodes, text, start) {\n\tfor (let i = start; i < nodes.length; i += 1) {\n\t\tconst node = nodes[i];\n\t\tif (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n\n/**\n * @param {boolean} is_svg\n * @returns {HtmlTagHydration}\n */\nexport function claim_html_tag(nodes, is_svg) {\n\t// find html opening tag\n\tconst start_index = get_comment_idx(nodes, 'HTML_TAG_START', 0);\n\tconst end_index = get_comment_idx(nodes, 'HTML_TAG_END', start_index + 1);\n\tif (start_index === -1 || end_index === -1) {\n\t\treturn new HtmlTagHydration(is_svg);\n\t}\n\n\tinit_claim_info(nodes);\n\tconst html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n\tdetach(html_tag_nodes[0]);\n\tdetach(html_tag_nodes[html_tag_nodes.length - 1]);\n\tconst claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n\tif (claimed_nodes.length === 0) {\n\t\treturn new HtmlTagHydration(is_svg);\n\t}\n\tfor (const n of claimed_nodes) {\n\t\tn.claim_order = nodes.claim_info.total_claimed;\n\t\tnodes.claim_info.total_claimed += 1;\n\t}\n\treturn new HtmlTagHydration(is_svg, claimed_nodes);\n}\n\n/**\n * @param {Text} text\n * @param {unknown} data\n * @returns {void}\n */\nexport function set_data(text, data) {\n\tdata = '' + data;\n\tif (text.data === data) return;\n\ttext.data = /** @type {string} */ (data);\n}\n\n/**\n * @param {Text} text\n * @param {unknown} data\n * @returns {void}\n */\nexport function set_data_contenteditable(text, data) {\n\tdata = '' + data;\n\tif (text.wholeText === data) return;\n\ttext.data = /** @type {string} */ (data);\n}\n\n/**\n * @param {Text} text\n * @param {unknown} data\n * @param {string} attr_value\n * @returns {void}\n */\nexport function set_data_maybe_contenteditable(text, data, attr_value) {\n\tif (~contenteditable_truthy_values.indexOf(attr_value)) {\n\t\tset_data_contenteditable(text, data);\n\t} else {\n\t\tset_data(text, data);\n\t}\n}\n\n/**\n * @returns {void} */\nexport function set_input_value(input, value) {\n\tinput.value = value == null ? '' : value;\n}\n\n/**\n * @returns {void} */\nexport function set_input_type(input, type) {\n\ttry {\n\t\tinput.type = type;\n\t} catch (e) {\n\t\t// do nothing\n\t}\n}\n\n/**\n * @returns {void} */\nexport function set_style(node, key, value, important) {\n\tif (value == null) {\n\t\tnode.style.removeProperty(key);\n\t} else {\n\t\tnode.style.setProperty(key, value, important ? 'important' : '');\n\t}\n}\n\n/**\n * @returns {void} */\nexport function select_option(select, value, mounting) {\n\tfor (let i = 0; i < select.options.length; i += 1) {\n\t\tconst option = select.options[i];\n\t\tif (option.__value === value) {\n\t\t\toption.selected = true;\n\t\t\treturn;\n\t\t}\n\t}\n\tif (!mounting || value !== undefined) {\n\t\tselect.selectedIndex = -1; // no option should be selected\n\t}\n}\n\n/**\n * @returns {void} */\nexport function select_options(select, value) {\n\tfor (let i = 0; i < select.options.length; i += 1) {\n\t\tconst option = select.options[i];\n\t\toption.selected = ~value.indexOf(option.__value);\n\t}\n}\n\nexport function select_value(select) {\n\tconst selected_option = select.querySelector(':checked');\n\treturn selected_option && selected_option.__value;\n}\n\nexport function select_multiple_value(select) {\n\treturn [].map.call(select.querySelectorAll(':checked'), (option) => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\n\n/**\n * @type {boolean} */\nlet crossorigin;\n\n/**\n * @returns {boolean} */\nexport function is_crossorigin() {\n\tif (crossorigin === undefined) {\n\t\tcrossorigin = false;\n\t\ttry {\n\t\t\tif (typeof window !== 'undefined' && window.parent) {\n\t\t\t\tvoid window.parent.document;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tcrossorigin = true;\n\t\t}\n\t}\n\treturn crossorigin;\n}\n\n/**\n * @param {HTMLElement} node\n * @param {() => void} fn\n * @returns {() => void}\n */\nexport function add_iframe_resize_listener(node, fn) {\n\tconst computed_style = getComputedStyle(node);\n\tif (computed_style.position === 'static') {\n\t\tnode.style.position = 'relative';\n\t}\n\tconst iframe = element('iframe');\n\tiframe.setAttribute(\n\t\t'style',\n\t\t'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n\t\t\t'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;'\n\t);\n\tiframe.setAttribute('aria-hidden', 'true');\n\tiframe.tabIndex = -1;\n\tconst crossorigin = is_crossorigin();\n\n\t/**\n\t * @type {() => void}\n\t */\n\tlet unsubscribe;\n\tif (crossorigin) {\n\t\tiframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n\t\tunsubscribe = listen(\n\t\t\twindow,\n\t\t\t'message',\n\t\t\t/** @param {MessageEvent} event */ (event) => {\n\t\t\t\tif (event.source === iframe.contentWindow) fn();\n\t\t\t}\n\t\t);\n\t} else {\n\t\tiframe.src = 'about:blank';\n\t\tiframe.onload = () => {\n\t\t\tunsubscribe = listen(iframe.contentWindow, 'resize', fn);\n\t\t\t// make sure an initial resize event is fired _after_ the iframe is loaded (which is asynchronous)\n\t\t\t// see https://github.com/sveltejs/svelte/issues/4233\n\t\t\tfn();\n\t\t};\n\t}\n\tappend(node, iframe);\n\treturn () => {\n\t\tif (crossorigin) {\n\t\t\tunsubscribe();\n\t\t} else if (unsubscribe && iframe.contentWindow) {\n\t\t\tunsubscribe();\n\t\t}\n\t\tdetach(iframe);\n\t};\n}\nexport const resize_observer_content_box = /* @__PURE__ */ new ResizeObserverSingleton({\n\tbox: 'content-box'\n});\nexport const resize_observer_border_box = /* @__PURE__ */ new ResizeObserverSingleton({\n\tbox: 'border-box'\n});\nexport const resize_observer_device_pixel_content_box = /* @__PURE__ */ new ResizeObserverSingleton(\n\t{ box: 'device-pixel-content-box' }\n);\nexport { ResizeObserverSingleton };\n\n/**\n * @returns {void} */\nexport function toggle_class(element, name, toggle) {\n\t// The `!!` is required because an `undefined` flag means flipping the current state.\n\telement.classList.toggle(name, !!toggle);\n}\n\n/**\n * @template T\n * @param {string} type\n * @param {T} [detail]\n * @param {{ bubbles?: boolean, cancelable?: boolean }} [options]\n * @returns {CustomEvent<T>}\n */\nexport function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n\treturn new CustomEvent(type, { detail, bubbles, cancelable });\n}\n\n/**\n * @param {string} selector\n * @param {HTMLElement} parent\n * @returns {ChildNodeArray}\n */\nexport function query_selector_all(selector, parent = document.body) {\n\treturn Array.from(parent.querySelectorAll(selector));\n}\n\n/**\n * @param {string} nodeId\n * @param {HTMLElement} head\n * @returns {any[]}\n */\nexport function head_selector(nodeId, head) {\n\tconst result = [];\n\tlet started = 0;\n\tfor (const node of head.childNodes) {\n\t\tif (node.nodeType === 8 /* comment node */) {\n\t\t\tconst comment = node.textContent.trim();\n\t\t\tif (comment === `HEAD_${nodeId}_END`) {\n\t\t\t\tstarted -= 1;\n\t\t\t\tresult.push(node);\n\t\t\t} else if (comment === `HEAD_${nodeId}_START`) {\n\t\t\t\tstarted += 1;\n\t\t\t\tresult.push(node);\n\t\t\t}\n\t\t} else if (started > 0) {\n\t\t\tresult.push(node);\n\t\t}\n\t}\n\treturn result;\n}\n/** */\nexport class HtmlTag {\n\t/**\n\t * @private\n\t * @default false\n\t */\n\tis_svg = false;\n\t/** parent for creating node */\n\te = undefined;\n\t/** html tag nodes */\n\tn = undefined;\n\t/** target */\n\tt = undefined;\n\t/** anchor */\n\ta = undefined;\n\tconstructor(is_svg = false) {\n\t\tthis.is_svg = is_svg;\n\t\tthis.e = this.n = null;\n\t}\n\n\t/**\n\t * @param {string} html\n\t * @returns {void}\n\t */\n\tc(html) {\n\t\tthis.h(html);\n\t}\n\n\t/**\n\t * @param {string} html\n\t * @param {HTMLElement | SVGElement} target\n\t * @param {HTMLElement | SVGElement} anchor\n\t * @returns {void}\n\t */\n\tm(html, target, anchor = null) {\n\t\tif (!this.e) {\n\t\t\tif (this.is_svg)\n\t\t\t\tthis.e = svg_element(/** @type {keyof SVGElementTagNameMap} */ (target.nodeName));\n\t\t\t/** #7364  target for <template> may be provided as #document-fragment(11) */ else\n\t\t\t\tthis.e = element(\n\t\t\t\t\t/** @type {keyof HTMLElementTagNameMap} */ (\n\t\t\t\t\t\ttarget.nodeType === 11 ? 'TEMPLATE' : target.nodeName\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\tthis.t =\n\t\t\t\ttarget.tagName !== 'TEMPLATE'\n\t\t\t\t\t? target\n\t\t\t\t\t: /** @type {HTMLTemplateElement} */ (target).content;\n\t\t\tthis.c(html);\n\t\t}\n\t\tthis.i(anchor);\n\t}\n\n\t/**\n\t * @param {string} html\n\t * @returns {void}\n\t */\n\th(html) {\n\t\tthis.e.innerHTML = html;\n\t\tthis.n = Array.from(\n\t\t\tthis.e.nodeName === 'TEMPLATE' ? this.e.content.childNodes : this.e.childNodes\n\t\t);\n\t}\n\n\t/**\n\t * @returns {void} */\n\ti(anchor) {\n\t\tfor (let i = 0; i < this.n.length; i += 1) {\n\t\t\tinsert(this.t, this.n[i], anchor);\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} html\n\t * @returns {void}\n\t */\n\tp(html) {\n\t\tthis.d();\n\t\tthis.h(html);\n\t\tthis.i(this.a);\n\t}\n\n\t/**\n\t * @returns {void} */\n\td() {\n\t\tthis.n.forEach(detach);\n\t}\n}\n\nexport class HtmlTagHydration extends HtmlTag {\n\t/** @type {Element[]} hydration claimed nodes */\n\tl = undefined;\n\n\tconstructor(is_svg = false, claimed_nodes) {\n\t\tsuper(is_svg);\n\t\tthis.e = this.n = null;\n\t\tthis.l = claimed_nodes;\n\t}\n\n\t/**\n\t * @param {string} html\n\t * @returns {void}\n\t */\n\tc(html) {\n\t\tif (this.l) {\n\t\t\tthis.n = this.l;\n\t\t} else {\n\t\t\tsuper.c(html);\n\t\t}\n\t}\n\n\t/**\n\t * @returns {void} */\n\ti(anchor) {\n\t\tfor (let i = 0; i < this.n.length; i += 1) {\n\t\t\tinsert_hydration(this.t, this.n[i], anchor);\n\t\t}\n\t}\n}\n\n/**\n * @param {NamedNodeMap} attributes\n * @returns {{}}\n */\nexport function attribute_to_object(attributes) {\n\tconst result = {};\n\tfor (const attribute of attributes) {\n\t\tresult[attribute.name] = attribute.value;\n\t}\n\treturn result;\n}\n\nconst escaped = {\n\t'\"': '&quot;',\n\t'&': '&amp;',\n\t'<': '&lt;'\n};\n\nconst regex_attribute_characters_to_escape = /[\"&<]/g;\n\n/**\n * Note that the attribute itself should be surrounded in double quotes\n * @param {any} attribute\n */\nfunction escape_attribute(attribute) {\n\treturn String(attribute).replace(regex_attribute_characters_to_escape, (match) => escaped[match]);\n}\n\n/**\n * @param {Record<string, string>} attributes\n */\nexport function stringify_spread(attributes) {\n\tlet str = ' ';\n\tfor (const key in attributes) {\n\t\tif (attributes[key] != null) {\n\t\t\tstr += `${key}=\"${escape_attribute(attributes[key])}\" `;\n\t\t}\n\t}\n\n\treturn str;\n}\n\n/**\n * @param {HTMLElement} element\n * @returns {{}}\n */\nexport function get_custom_elements_slots(element) {\n\tconst result = {};\n\telement.childNodes.forEach(\n\t\t/** @param {Element} node */ (node) => {\n\t\t\tresult[node.slot || 'default'] = true;\n\t\t}\n\t);\n\treturn result;\n}\n\nexport function construct_svelte_component(component, props) {\n\treturn new component(props);\n}\n\n/**\n * @typedef {Node & {\n * \tclaim_order?: number;\n * \thydrate_init?: true;\n * \tactual_end_child?: NodeEx;\n * \tchildNodes: NodeListOf<NodeEx>;\n * }} NodeEx\n */\n\n/** @typedef {ChildNode & NodeEx} ChildNodeEx */\n\n/** @typedef {NodeEx & { claim_order: number }} NodeEx2 */\n\n/**\n * @typedef {ChildNodeEx[] & {\n * \tclaim_info?: {\n * \t\tlast_index: number;\n * \t\ttotal_claimed: number;\n * \t};\n * }} ChildNodeArray\n */\n","import { custom_event } from './dom.js';\n\nexport let current_component;\n\n/** @returns {void} */\nexport function set_current_component(component) {\n\tcurrent_component = component;\n}\n\nexport function get_current_component() {\n\tif (!current_component) throw new Error('Function called outside component initialization');\n\treturn current_component;\n}\n\n/**\n * Schedules a callback to run immediately before the component is updated after any state change.\n *\n * The first time the callback runs will be before the initial `onMount`\n *\n * https://svelte.dev/docs/svelte#beforeupdate\n * @param {() => any} fn\n * @returns {void}\n */\nexport function beforeUpdate(fn) {\n\tget_current_component().$$.before_update.push(fn);\n}\n\n/**\n * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.\n * It must be called during the component's initialisation (but doesn't need to live *inside* the component;\n * it can be called from an external module).\n *\n * If a function is returned _synchronously_ from `onMount`, it will be called when the component is unmounted.\n *\n * `onMount` does not run inside a [server-side component](https://svelte.dev/docs#run-time-server-side-component-api).\n *\n * https://svelte.dev/docs/svelte#onmount\n * @template T\n * @param {() => import('./private.js').NotFunction<T> | Promise<import('./private.js').NotFunction<T>> | (() => any)} fn\n * @returns {void}\n */\nexport function onMount(fn) {\n\tget_current_component().$$.on_mount.push(fn);\n}\n\n/**\n * Schedules a callback to run immediately after the component has been updated.\n *\n * The first time the callback runs will be after the initial `onMount`\n *\n * https://svelte.dev/docs/svelte#afterupdate\n * @param {() => any} fn\n * @returns {void}\n */\nexport function afterUpdate(fn) {\n\tget_current_component().$$.after_update.push(fn);\n}\n\n/**\n * Schedules a callback to run immediately before the component is unmounted.\n *\n * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the\n * only one that runs inside a server-side component.\n *\n * https://svelte.dev/docs/svelte#ondestroy\n * @param {() => any} fn\n * @returns {void}\n */\nexport function onDestroy(fn) {\n\tget_current_component().$$.on_destroy.push(fn);\n}\n\n/**\n * Creates an event dispatcher that can be used to dispatch [component events](https://svelte.dev/docs#template-syntax-component-directives-on-eventname).\n * Event dispatchers are functions that can take two arguments: `name` and `detail`.\n *\n * Component events created with `createEventDispatcher` create a\n * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).\n * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).\n * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)\n * property and can contain any type of data.\n *\n * The event dispatcher can be typed to narrow the allowed event names and the type of the `detail` argument:\n * ```ts\n * const dispatch = createEventDispatcher<{\n *  loaded: never; // does not take a detail argument\n *  change: string; // takes a detail argument of type string, which is required\n *  optional: number | null; // takes an optional detail argument of type number\n * }>();\n * ```\n *\n * https://svelte.dev/docs/svelte#createeventdispatcher\n * @template {Record<string, any>} [EventMap=any]\n * @returns {import('./public.js').EventDispatcher<EventMap>}\n */\nexport function createEventDispatcher() {\n\tconst component = get_current_component();\n\treturn (type, detail, { cancelable = false } = {}) => {\n\t\tconst callbacks = component.$$.callbacks[type];\n\t\tif (callbacks) {\n\t\t\t// TODO are there situations where events could be dispatched\n\t\t\t// in a server (non-DOM) environment?\n\t\t\tconst event = custom_event(/** @type {string} */ (type), detail, { cancelable });\n\t\t\tcallbacks.slice().forEach((fn) => {\n\t\t\t\tfn.call(component, event);\n\t\t\t});\n\t\t\treturn !event.defaultPrevented;\n\t\t}\n\t\treturn true;\n\t};\n}\n\n/**\n * Associates an arbitrary `context` object with the current component and the specified `key`\n * and returns that object. The context is then available to children of the component\n * (including slotted content) with `getContext`.\n *\n * Like lifecycle functions, this must be called during component initialisation.\n *\n * https://svelte.dev/docs/svelte#setcontext\n * @template T\n * @param {any} key\n * @param {T} context\n * @returns {T}\n */\nexport function setContext(key, context) {\n\tget_current_component().$$.context.set(key, context);\n\treturn context;\n}\n\n/**\n * Retrieves the context that belongs to the closest parent component with the specified `key`.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs/svelte#getcontext\n * @template T\n * @param {any} key\n * @returns {T}\n */\nexport function getContext(key) {\n\treturn get_current_component().$$.context.get(key);\n}\n\n/**\n * Retrieves the whole context map that belongs to the closest parent component.\n * Must be called during component initialisation. Useful, for example, if you\n * programmatically create a component and want to pass the existing context to it.\n *\n * https://svelte.dev/docs/svelte#getallcontexts\n * @template {Map<any, any>} [T=Map<any, any>]\n * @returns {T}\n */\nexport function getAllContexts() {\n\treturn get_current_component().$$.context;\n}\n\n/**\n * Checks whether a given `key` has been set in the context of a parent component.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs/svelte#hascontext\n * @param {any} key\n * @returns {boolean}\n */\nexport function hasContext(key) {\n\treturn get_current_component().$$.context.has(key);\n}\n\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\n/**\n * @param component\n * @param event\n * @returns {void}\n */\nexport function bubble(component, event) {\n\tconst callbacks = component.$$.callbacks[event.type];\n\tif (callbacks) {\n\t\t// @ts-ignore\n\t\tcallbacks.slice().forEach((fn) => fn.call(this, event));\n\t}\n}\n","import { run_all } from './utils.js';\nimport { current_component, set_current_component } from './lifecycle.js';\n\nexport const dirty_components = [];\nexport const intros = { enabled: false };\nexport const binding_callbacks = [];\n\nlet render_callbacks = [];\n\nconst flush_callbacks = [];\n\nconst resolved_promise = /* @__PURE__ */ Promise.resolve();\n\nlet update_scheduled = false;\n\n/** @returns {void} */\nexport function schedule_update() {\n\tif (!update_scheduled) {\n\t\tupdate_scheduled = true;\n\t\tresolved_promise.then(flush);\n\t}\n}\n\n/** @returns {Promise<void>} */\nexport function tick() {\n\tschedule_update();\n\treturn resolved_promise;\n}\n\n/** @returns {void} */\nexport function add_render_callback(fn) {\n\trender_callbacks.push(fn);\n}\n\n/** @returns {void} */\nexport function add_flush_callback(fn) {\n\tflush_callbacks.push(fn);\n}\n\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\n\nlet flushidx = 0; // Do *not* move this inside the flush() function\n\n/** @returns {void} */\nexport function flush() {\n\t// Do not reenter flush while dirty components are updated, as this can\n\t// result in an infinite loop. Instead, let the inner flush handle it.\n\t// Reentrancy is ok afterwards for bindings etc.\n\tif (flushidx !== 0) {\n\t\treturn;\n\t}\n\tconst saved_component = current_component;\n\tdo {\n\t\t// first, call beforeUpdate functions\n\t\t// and update components\n\t\ttry {\n\t\t\twhile (flushidx < dirty_components.length) {\n\t\t\t\tconst component = dirty_components[flushidx];\n\t\t\t\tflushidx++;\n\t\t\t\tset_current_component(component);\n\t\t\t\tupdate(component.$$);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t// reset dirty state to not end up in a deadlocked state and then rethrow\n\t\t\tdirty_components.length = 0;\n\t\t\tflushidx = 0;\n\t\t\tthrow e;\n\t\t}\n\t\tset_current_component(null);\n\t\tdirty_components.length = 0;\n\t\tflushidx = 0;\n\t\twhile (binding_callbacks.length) binding_callbacks.pop()();\n\t\t// then, once components are updated, call\n\t\t// afterUpdate functions. This may cause\n\t\t// subsequent updates...\n\t\tfor (let i = 0; i < render_callbacks.length; i += 1) {\n\t\t\tconst callback = render_callbacks[i];\n\t\t\tif (!seen_callbacks.has(callback)) {\n\t\t\t\t// ...so guard against infinite loops\n\t\t\t\tseen_callbacks.add(callback);\n\t\t\t\tcallback();\n\t\t\t}\n\t\t}\n\t\trender_callbacks.length = 0;\n\t} while (dirty_components.length);\n\twhile (flush_callbacks.length) {\n\t\tflush_callbacks.pop()();\n\t}\n\tupdate_scheduled = false;\n\tseen_callbacks.clear();\n\tset_current_component(saved_component);\n}\n\n/** @returns {void} */\nfunction update($$) {\n\tif ($$.fragment !== null) {\n\t\t$$.update();\n\t\trun_all($$.before_update);\n\t\tconst dirty = $$.dirty;\n\t\t$$.dirty = [-1];\n\t\t$$.fragment && $$.fragment.p($$.ctx, dirty);\n\t\t$$.after_update.forEach(add_render_callback);\n\t}\n}\n\n/**\n * Useful for example to execute remaining `afterUpdate` callbacks before executing `destroy`.\n * @param {Function[]} fns\n * @returns {void}\n */\nexport function flush_render_callbacks(fns) {\n\tconst filtered = [];\n\tconst targets = [];\n\trender_callbacks.forEach((c) => (fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c)));\n\ttargets.forEach((c) => c());\n\trender_callbacks = filtered;\n}\n","import { identity as linear, is_function, noop, run_all } from './utils.js';\nimport { now } from './environment.js';\nimport { loop } from './loop.js';\nimport { create_rule, delete_rule } from './style_manager.js';\nimport { custom_event } from './dom.js';\nimport { add_render_callback } from './scheduler.js';\n\n/**\n * @type {Promise<void> | null}\n */\nlet promise;\n\n/**\n * @returns {Promise<void>}\n */\nfunction wait() {\n\tif (!promise) {\n\t\tpromise = Promise.resolve();\n\t\tpromise.then(() => {\n\t\t\tpromise = null;\n\t\t});\n\t}\n\treturn promise;\n}\n\n/**\n * @param {Element} node\n * @param {INTRO | OUTRO | boolean} direction\n * @param {'start' | 'end'} kind\n * @returns {void}\n */\nfunction dispatch(node, direction, kind) {\n\tnode.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\n\nconst outroing = new Set();\n\n/**\n * @type {Outro}\n */\nlet outros;\n\n/**\n * @returns {void} */\nexport function group_outros() {\n\toutros = {\n\t\tr: 0,\n\t\tc: [],\n\t\tp: outros // parent group\n\t};\n}\n\n/**\n * @returns {void} */\nexport function check_outros() {\n\tif (!outros.r) {\n\t\trun_all(outros.c);\n\t}\n\toutros = outros.p;\n}\n\n/**\n * @param {import('./private.js').Fragment} block\n * @param {0 | 1} [local]\n * @returns {void}\n */\nexport function transition_in(block, local) {\n\tif (block && block.i) {\n\t\toutroing.delete(block);\n\t\tblock.i(local);\n\t}\n}\n\n/**\n * @param {import('./private.js').Fragment} block\n * @param {0 | 1} local\n * @param {0 | 1} [detach]\n * @param {() => void} [callback]\n * @returns {void}\n */\nexport function transition_out(block, local, detach, callback) {\n\tif (block && block.o) {\n\t\tif (outroing.has(block)) return;\n\t\toutroing.add(block);\n\t\toutros.c.push(() => {\n\t\t\toutroing.delete(block);\n\t\t\tif (callback) {\n\t\t\t\tif (detach) block.d(1);\n\t\t\t\tcallback();\n\t\t\t}\n\t\t});\n\t\tblock.o(local);\n\t} else if (callback) {\n\t\tcallback();\n\t}\n}\n\n/**\n * @type {import('../transition/public.js').TransitionConfig}\n */\nconst null_transition = { duration: 0 };\n\n/**\n * @param {Element & ElementCSSInlineStyle} node\n * @param {TransitionFn} fn\n * @param {any} params\n * @returns {{ start(): void; invalidate(): void; end(): void; }}\n */\nexport function create_in_transition(node, fn, params) {\n\t/**\n\t * @type {TransitionOptions} */\n\tconst options = { direction: 'in' };\n\tlet config = fn(node, params, options);\n\tlet running = false;\n\tlet animation_name;\n\tlet task;\n\tlet uid = 0;\n\n\t/**\n\t * @returns {void} */\n\tfunction cleanup() {\n\t\tif (animation_name) delete_rule(node, animation_name);\n\t}\n\n\t/**\n\t * @returns {void} */\n\tfunction go() {\n\t\tconst {\n\t\t\tdelay = 0,\n\t\t\tduration = 300,\n\t\t\teasing = linear,\n\t\t\ttick = noop,\n\t\t\tcss\n\t\t} = config || null_transition;\n\t\tif (css) animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n\t\ttick(0, 1);\n\t\tconst start_time = now() + delay;\n\t\tconst end_time = start_time + duration;\n\t\tif (task) task.abort();\n\t\trunning = true;\n\t\tadd_render_callback(() => dispatch(node, true, 'start'));\n\t\ttask = loop((now) => {\n\t\t\tif (running) {\n\t\t\t\tif (now >= end_time) {\n\t\t\t\t\ttick(1, 0);\n\t\t\t\t\tdispatch(node, true, 'end');\n\t\t\t\t\tcleanup();\n\t\t\t\t\treturn (running = false);\n\t\t\t\t}\n\t\t\t\tif (now >= start_time) {\n\t\t\t\t\tconst t = easing((now - start_time) / duration);\n\t\t\t\t\ttick(t, 1 - t);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn running;\n\t\t});\n\t}\n\tlet started = false;\n\treturn {\n\t\tstart() {\n\t\t\tif (started) return;\n\t\t\tstarted = true;\n\t\t\tdelete_rule(node);\n\t\t\tif (is_function(config)) {\n\t\t\t\tconfig = config(options);\n\t\t\t\twait().then(go);\n\t\t\t} else {\n\t\t\t\tgo();\n\t\t\t}\n\t\t},\n\t\tinvalidate() {\n\t\t\tstarted = false;\n\t\t},\n\t\tend() {\n\t\t\tif (running) {\n\t\t\t\tcleanup();\n\t\t\t\trunning = false;\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * @param {Element & ElementCSSInlineStyle} node\n * @param {TransitionFn} fn\n * @param {any} params\n * @returns {{ end(reset: any): void; }}\n */\nexport function create_out_transition(node, fn, params) {\n\t/** @type {TransitionOptions} */\n\tconst options = { direction: 'out' };\n\tlet config = fn(node, params, options);\n\tlet running = true;\n\tlet animation_name;\n\tconst group = outros;\n\tgroup.r += 1;\n\t/** @type {boolean} */\n\tlet original_inert_value;\n\n\t/**\n\t * @returns {void} */\n\tfunction go() {\n\t\tconst {\n\t\t\tdelay = 0,\n\t\t\tduration = 300,\n\t\t\teasing = linear,\n\t\t\ttick = noop,\n\t\t\tcss\n\t\t} = config || null_transition;\n\n\t\tif (css) animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n\n\t\tconst start_time = now() + delay;\n\t\tconst end_time = start_time + duration;\n\t\tadd_render_callback(() => dispatch(node, false, 'start'));\n\n\t\tif ('inert' in node) {\n\t\t\toriginal_inert_value = /** @type {HTMLElement} */ (node).inert;\n\t\t\tnode.inert = true;\n\t\t}\n\n\t\tloop((now) => {\n\t\t\tif (running) {\n\t\t\t\tif (now >= end_time) {\n\t\t\t\t\ttick(0, 1);\n\t\t\t\t\tdispatch(node, false, 'end');\n\t\t\t\t\tif (!--group.r) {\n\t\t\t\t\t\t// this will result in `end()` being called,\n\t\t\t\t\t\t// so we don't need to clean up here\n\t\t\t\t\t\trun_all(group.c);\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (now >= start_time) {\n\t\t\t\t\tconst t = easing((now - start_time) / duration);\n\t\t\t\t\ttick(1 - t, t);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn running;\n\t\t});\n\t}\n\n\tif (is_function(config)) {\n\t\twait().then(() => {\n\t\t\t// @ts-ignore\n\t\t\tconfig = config(options);\n\t\t\tgo();\n\t\t});\n\t} else {\n\t\tgo();\n\t}\n\n\treturn {\n\t\tend(reset) {\n\t\t\tif (reset && 'inert' in node) {\n\t\t\t\tnode.inert = original_inert_value;\n\t\t\t}\n\t\t\tif (reset && config.tick) {\n\t\t\t\tconfig.tick(1, 0);\n\t\t\t}\n\t\t\tif (running) {\n\t\t\t\tif (animation_name) delete_rule(node, animation_name);\n\t\t\t\trunning = false;\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * @param {Element & ElementCSSInlineStyle} node\n * @param {TransitionFn} fn\n * @param {any} params\n * @param {boolean} intro\n * @returns {{ run(b: 0 | 1): void; end(): void; }}\n */\nexport function create_bidirectional_transition(node, fn, params, intro) {\n\t/**\n\t * @type {TransitionOptions} */\n\tconst options = { direction: 'both' };\n\tlet config = fn(node, params, options);\n\tlet t = intro ? 0 : 1;\n\n\t/**\n\t * @type {Program | null} */\n\tlet running_program = null;\n\n\t/**\n\t * @type {PendingProgram | null} */\n\tlet pending_program = null;\n\tlet animation_name = null;\n\n\t/** @type {boolean} */\n\tlet original_inert_value;\n\n\t/**\n\t * @returns {void} */\n\tfunction clear_animation() {\n\t\tif (animation_name) delete_rule(node, animation_name);\n\t}\n\n\t/**\n\t * @param {PendingProgram} program\n\t * @param {number} duration\n\t * @returns {Program}\n\t */\n\tfunction init(program, duration) {\n\t\tconst d = /** @type {Program['d']} */ (program.b - t);\n\t\tduration *= Math.abs(d);\n\t\treturn {\n\t\t\ta: t,\n\t\t\tb: program.b,\n\t\t\td,\n\t\t\tduration,\n\t\t\tstart: program.start,\n\t\t\tend: program.start + duration,\n\t\t\tgroup: program.group\n\t\t};\n\t}\n\n\t/**\n\t * @param {INTRO | OUTRO} b\n\t * @returns {void}\n\t */\n\tfunction go(b) {\n\t\tconst {\n\t\t\tdelay = 0,\n\t\t\tduration = 300,\n\t\t\teasing = linear,\n\t\t\ttick = noop,\n\t\t\tcss\n\t\t} = config || null_transition;\n\n\t\t/**\n\t\t * @type {PendingProgram} */\n\t\tconst program = {\n\t\t\tstart: now() + delay,\n\t\t\tb\n\t\t};\n\n\t\tif (!b) {\n\t\t\t// @ts-ignore todo: improve typings\n\t\t\tprogram.group = outros;\n\t\t\toutros.r += 1;\n\t\t}\n\n\t\tif ('inert' in node) {\n\t\t\tif (b) {\n\t\t\t\tif (original_inert_value !== undefined) {\n\t\t\t\t\t// aborted/reversed outro — restore previous inert value\n\t\t\t\t\tnode.inert = original_inert_value;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toriginal_inert_value = /** @type {HTMLElement} */ (node).inert;\n\t\t\t\tnode.inert = true;\n\t\t\t}\n\t\t}\n\n\t\tif (running_program || pending_program) {\n\t\t\tpending_program = program;\n\t\t} else {\n\t\t\t// if this is an intro, and there's a delay, we need to do\n\t\t\t// an initial tick and/or apply CSS animation immediately\n\t\t\tif (css) {\n\t\t\t\tclear_animation();\n\t\t\t\tanimation_name = create_rule(node, t, b, duration, delay, easing, css);\n\t\t\t}\n\t\t\tif (b) tick(0, 1);\n\t\t\trunning_program = init(program, duration);\n\t\t\tadd_render_callback(() => dispatch(node, b, 'start'));\n\t\t\tloop((now) => {\n\t\t\t\tif (pending_program && now > pending_program.start) {\n\t\t\t\t\trunning_program = init(pending_program, duration);\n\t\t\t\t\tpending_program = null;\n\t\t\t\t\tdispatch(node, running_program.b, 'start');\n\t\t\t\t\tif (css) {\n\t\t\t\t\t\tclear_animation();\n\t\t\t\t\t\tanimation_name = create_rule(\n\t\t\t\t\t\t\tnode,\n\t\t\t\t\t\t\tt,\n\t\t\t\t\t\t\trunning_program.b,\n\t\t\t\t\t\t\trunning_program.duration,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\teasing,\n\t\t\t\t\t\t\tconfig.css\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (running_program) {\n\t\t\t\t\tif (now >= running_program.end) {\n\t\t\t\t\t\ttick((t = running_program.b), 1 - t);\n\t\t\t\t\t\tdispatch(node, running_program.b, 'end');\n\t\t\t\t\t\tif (!pending_program) {\n\t\t\t\t\t\t\t// we're done\n\t\t\t\t\t\t\tif (running_program.b) {\n\t\t\t\t\t\t\t\t// intro — we can tidy up immediately\n\t\t\t\t\t\t\t\tclear_animation();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// outro — needs to be coordinated\n\t\t\t\t\t\t\t\tif (!--running_program.group.r) run_all(running_program.group.c);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\trunning_program = null;\n\t\t\t\t\t} else if (now >= running_program.start) {\n\t\t\t\t\t\tconst p = now - running_program.start;\n\t\t\t\t\t\tt = running_program.a + running_program.d * easing(p / running_program.duration);\n\t\t\t\t\t\ttick(t, 1 - t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn !!(running_program || pending_program);\n\t\t\t});\n\t\t}\n\t}\n\treturn {\n\t\trun(b) {\n\t\t\tif (is_function(config)) {\n\t\t\t\twait().then(() => {\n\t\t\t\t\tconst opts = { direction: b ? 'in' : 'out' };\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tconfig = config(opts);\n\t\t\t\t\tgo(b);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tgo(b);\n\t\t\t}\n\t\t},\n\t\tend() {\n\t\t\tclear_animation();\n\t\t\trunning_program = pending_program = null;\n\t\t}\n\t};\n}\n\n/** @typedef {1} INTRO */\n/** @typedef {0} OUTRO */\n/** @typedef {{ direction: 'in' | 'out' | 'both' }} TransitionOptions */\n/** @typedef {(node: Element, params: any, options: TransitionOptions) => import('../transition/public.js').TransitionConfig} TransitionFn */\n\n/**\n * @typedef {Object} Outro\n * @property {number} r\n * @property {Function[]} c\n * @property {Object} p\n */\n\n/**\n * @typedef {Object} PendingProgram\n * @property {number} start\n * @property {INTRO|OUTRO} b\n * @property {Outro} [group]\n */\n\n/**\n * @typedef {Object} Program\n * @property {number} a\n * @property {INTRO|OUTRO} b\n * @property {1|-1} d\n * @property {number} duration\n * @property {number} start\n * @property {number} end\n * @property {Outro} [group]\n */\n","import { transition_in, transition_out } from './transitions.js';\nimport { run_all } from './utils.js';\n\n// general each functions:\n\nexport function ensure_array_like(array_like_or_iterator) {\n\treturn array_like_or_iterator?.length !== undefined\n\t\t? array_like_or_iterator\n\t\t: Array.from(array_like_or_iterator);\n}\n\n// keyed each functions:\n\n/** @returns {void} */\nexport function destroy_block(block, lookup) {\n\tblock.d(1);\n\tlookup.delete(block.key);\n}\n\n/** @returns {void} */\nexport function outro_and_destroy_block(block, lookup) {\n\ttransition_out(block, 1, 1, () => {\n\t\tlookup.delete(block.key);\n\t});\n}\n\n/** @returns {void} */\nexport function fix_and_destroy_block(block, lookup) {\n\tblock.f();\n\tdestroy_block(block, lookup);\n}\n\n/** @returns {void} */\nexport function fix_and_outro_and_destroy_block(block, lookup) {\n\tblock.f();\n\toutro_and_destroy_block(block, lookup);\n}\n\n/** @returns {any[]} */\nexport function update_keyed_each(\n\told_blocks,\n\tdirty,\n\tget_key,\n\tdynamic,\n\tctx,\n\tlist,\n\tlookup,\n\tnode,\n\tdestroy,\n\tcreate_each_block,\n\tnext,\n\tget_context\n) {\n\tlet o = old_blocks.length;\n\tlet n = list.length;\n\tlet i = o;\n\tconst old_indexes = {};\n\twhile (i--) old_indexes[old_blocks[i].key] = i;\n\tconst new_blocks = [];\n\tconst new_lookup = new Map();\n\tconst deltas = new Map();\n\tconst updates = [];\n\ti = n;\n\twhile (i--) {\n\t\tconst child_ctx = get_context(ctx, list, i);\n\t\tconst key = get_key(child_ctx);\n\t\tlet block = lookup.get(key);\n\t\tif (!block) {\n\t\t\tblock = create_each_block(key, child_ctx);\n\t\t\tblock.c();\n\t\t} else if (dynamic) {\n\t\t\t// defer updates until all the DOM shuffling is done\n\t\t\tupdates.push(() => block.p(child_ctx, dirty));\n\t\t}\n\t\tnew_lookup.set(key, (new_blocks[i] = block));\n\t\tif (key in old_indexes) deltas.set(key, Math.abs(i - old_indexes[key]));\n\t}\n\tconst will_move = new Set();\n\tconst did_move = new Set();\n\t/** @returns {void} */\n\tfunction insert(block) {\n\t\ttransition_in(block, 1);\n\t\tblock.m(node, next);\n\t\tlookup.set(block.key, block);\n\t\tnext = block.first;\n\t\tn--;\n\t}\n\twhile (o && n) {\n\t\tconst new_block = new_blocks[n - 1];\n\t\tconst old_block = old_blocks[o - 1];\n\t\tconst new_key = new_block.key;\n\t\tconst old_key = old_block.key;\n\t\tif (new_block === old_block) {\n\t\t\t// do nothing\n\t\t\tnext = new_block.first;\n\t\t\to--;\n\t\t\tn--;\n\t\t} else if (!new_lookup.has(old_key)) {\n\t\t\t// remove old block\n\t\t\tdestroy(old_block, lookup);\n\t\t\to--;\n\t\t} else if (!lookup.has(new_key) || will_move.has(new_key)) {\n\t\t\tinsert(new_block);\n\t\t} else if (did_move.has(old_key)) {\n\t\t\to--;\n\t\t} else if (deltas.get(new_key) > deltas.get(old_key)) {\n\t\t\tdid_move.add(new_key);\n\t\t\tinsert(new_block);\n\t\t} else {\n\t\t\twill_move.add(old_key);\n\t\t\to--;\n\t\t}\n\t}\n\twhile (o--) {\n\t\tconst old_block = old_blocks[o];\n\t\tif (!new_lookup.has(old_block.key)) destroy(old_block, lookup);\n\t}\n\twhile (n) insert(new_blocks[n - 1]);\n\trun_all(updates);\n\treturn new_blocks;\n}\n\n/** @returns {void} */\nexport function validate_each_keys(ctx, list, get_context, get_key) {\n\tconst keys = new Map();\n\tfor (let i = 0; i < list.length; i++) {\n\t\tconst key = get_key(get_context(ctx, list, i));\n\t\tif (keys.has(key)) {\n\t\t\tlet value = '';\n\t\t\ttry {\n\t\t\t\tvalue = `with value '${String(key)}' `;\n\t\t\t} catch (e) {\n\t\t\t\t// can't stringify\n\t\t\t}\n\t\t\tthrow new Error(\n\t\t\t\t`Cannot have duplicate keys in a keyed each: Keys at index ${keys.get(\n\t\t\t\t\tkey\n\t\t\t\t)} and ${i} ${value}are duplicates`\n\t\t\t);\n\t\t}\n\t\tkeys.set(key, i);\n\t}\n}\n","import {\n\tadd_render_callback,\n\tflush,\n\tflush_render_callbacks,\n\tschedule_update,\n\tdirty_components\n} from './scheduler.js';\nimport { current_component, set_current_component } from './lifecycle.js';\nimport { blank_object, is_empty, is_function, run, run_all, noop } from './utils.js';\nimport {\n\tchildren,\n\tdetach,\n\tstart_hydrating,\n\tend_hydrating,\n\tget_custom_elements_slots,\n\tinsert,\n\telement,\n\tattr\n} from './dom.js';\nimport { transition_in } from './transitions.js';\n\n/** @returns {void} */\nexport function bind(component, name, callback) {\n\tconst index = component.$$.props[name];\n\tif (index !== undefined) {\n\t\tcomponent.$$.bound[index] = callback;\n\t\tcallback(component.$$.ctx[index]);\n\t}\n}\n\n/** @returns {void} */\nexport function create_component(block) {\n\tblock && block.c();\n}\n\n/** @returns {void} */\nexport function claim_component(block, parent_nodes) {\n\tblock && block.l(parent_nodes);\n}\n\n/** @returns {void} */\nexport function mount_component(component, target, anchor) {\n\tconst { fragment, after_update } = component.$$;\n\tfragment && fragment.m(target, anchor);\n\t// onMount happens before the initial afterUpdate\n\tadd_render_callback(() => {\n\t\tconst new_on_destroy = component.$$.on_mount.map(run).filter(is_function);\n\t\t// if the component was destroyed immediately\n\t\t// it will update the `$$.on_destroy` reference to `null`.\n\t\t// the destructured on_destroy may still reference to the old array\n\t\tif (component.$$.on_destroy) {\n\t\t\tcomponent.$$.on_destroy.push(...new_on_destroy);\n\t\t} else {\n\t\t\t// Edge case - component was destroyed immediately,\n\t\t\t// most likely as a result of a binding initialising\n\t\t\trun_all(new_on_destroy);\n\t\t}\n\t\tcomponent.$$.on_mount = [];\n\t});\n\tafter_update.forEach(add_render_callback);\n}\n\n/** @returns {void} */\nexport function destroy_component(component, detaching) {\n\tconst $$ = component.$$;\n\tif ($$.fragment !== null) {\n\t\tflush_render_callbacks($$.after_update);\n\t\trun_all($$.on_destroy);\n\t\t$$.fragment && $$.fragment.d(detaching);\n\t\t// TODO null out other refs, including component.$$ (but need to\n\t\t// preserve final state?)\n\t\t$$.on_destroy = $$.fragment = null;\n\t\t$$.ctx = [];\n\t}\n}\n\n/** @returns {void} */\nfunction make_dirty(component, i) {\n\tif (component.$$.dirty[0] === -1) {\n\t\tdirty_components.push(component);\n\t\tschedule_update();\n\t\tcomponent.$$.dirty.fill(0);\n\t}\n\tcomponent.$$.dirty[(i / 31) | 0] |= 1 << i % 31;\n}\n\n// TODO: Document the other params\n/**\n * @param {SvelteComponent} component\n * @param {import('./public.js').ComponentConstructorOptions} options\n *\n * @param {import('./utils.js')['not_equal']} not_equal Used to compare props and state values.\n * @param {(target: Element | ShadowRoot) => void} [append_styles] Function that appends styles to the DOM when the component is first initialised.\n * This will be the `add_css` function from the compiled component.\n *\n * @returns {void}\n */\nexport function init(\n\tcomponent,\n\toptions,\n\tinstance,\n\tcreate_fragment,\n\tnot_equal,\n\tprops,\n\tappend_styles = null,\n\tdirty = [-1]\n) {\n\tconst parent_component = current_component;\n\tset_current_component(component);\n\t/** @type {import('./private.js').T$$} */\n\tconst $$ = (component.$$ = {\n\t\tfragment: null,\n\t\tctx: [],\n\t\t// state\n\t\tprops,\n\t\tupdate: noop,\n\t\tnot_equal,\n\t\tbound: blank_object(),\n\t\t// lifecycle\n\t\ton_mount: [],\n\t\ton_destroy: [],\n\t\ton_disconnect: [],\n\t\tbefore_update: [],\n\t\tafter_update: [],\n\t\tcontext: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n\t\t// everything else\n\t\tcallbacks: blank_object(),\n\t\tdirty,\n\t\tskip_bound: false,\n\t\troot: options.target || parent_component.$$.root\n\t});\n\tappend_styles && append_styles($$.root);\n\tlet ready = false;\n\t$$.ctx = instance\n\t\t? instance(component, options.props || {}, (i, ret, ...rest) => {\n\t\t\t\tconst value = rest.length ? rest[0] : ret;\n\t\t\t\tif ($$.ctx && not_equal($$.ctx[i], ($$.ctx[i] = value))) {\n\t\t\t\t\tif (!$$.skip_bound && $$.bound[i]) $$.bound[i](value);\n\t\t\t\t\tif (ready) make_dirty(component, i);\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t  })\n\t\t: [];\n\t$$.update();\n\tready = true;\n\trun_all($$.before_update);\n\t// `false` as a special case of no DOM component\n\t$$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n\tif (options.target) {\n\t\tif (options.hydrate) {\n\t\t\tstart_hydrating();\n\t\t\t// TODO: what is the correct type here?\n\t\t\t// @ts-expect-error\n\t\t\tconst nodes = children(options.target);\n\t\t\t$$.fragment && $$.fragment.l(nodes);\n\t\t\tnodes.forEach(detach);\n\t\t} else {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\t\t$$.fragment && $$.fragment.c();\n\t\t}\n\t\tif (options.intro) transition_in(component.$$.fragment);\n\t\tmount_component(component, options.target, options.anchor);\n\t\tend_hydrating();\n\t\tflush();\n\t}\n\tset_current_component(parent_component);\n}\n\nexport let SvelteElement;\n\nif (typeof HTMLElement === 'function') {\n\tSvelteElement = class extends HTMLElement {\n\t\t/** The Svelte component constructor */\n\t\t$$ctor;\n\t\t/** Slots */\n\t\t$$s;\n\t\t/** The Svelte component instance */\n\t\t$$c;\n\t\t/** Whether or not the custom element is connected */\n\t\t$$cn = false;\n\t\t/** Component props data */\n\t\t$$d = {};\n\t\t/** `true` if currently in the process of reflecting component props back to attributes */\n\t\t$$r = false;\n\t\t/** @type {Record<string, CustomElementPropDefinition>} Props definition (name, reflected, type etc) */\n\t\t$$p_d = {};\n\t\t/** @type {Record<string, Function[]>} Event listeners */\n\t\t$$l = {};\n\t\t/** @type {Map<Function, Function>} Event listener unsubscribe functions */\n\t\t$$l_u = new Map();\n\n\t\tconstructor($$componentCtor, $$slots, use_shadow_dom) {\n\t\t\tsuper();\n\t\t\tthis.$$ctor = $$componentCtor;\n\t\t\tthis.$$s = $$slots;\n\t\t\tif (use_shadow_dom) {\n\t\t\t\tthis.attachShadow({ mode: 'open' });\n\t\t\t}\n\t\t}\n\n\t\taddEventListener(type, listener, options) {\n\t\t\t// We can't determine upfront if the event is a custom event or not, so we have to\n\t\t\t// listen to both. If someone uses a custom event with the same name as a regular\n\t\t\t// browser event, this fires twice - we can't avoid that.\n\t\t\tthis.$$l[type] = this.$$l[type] || [];\n\t\t\tthis.$$l[type].push(listener);\n\t\t\tif (this.$$c) {\n\t\t\t\tconst unsub = this.$$c.$on(type, listener);\n\t\t\t\tthis.$$l_u.set(listener, unsub);\n\t\t\t}\n\t\t\tsuper.addEventListener(type, listener, options);\n\t\t}\n\n\t\tremoveEventListener(type, listener, options) {\n\t\t\tsuper.removeEventListener(type, listener, options);\n\t\t\tif (this.$$c) {\n\t\t\t\tconst unsub = this.$$l_u.get(listener);\n\t\t\t\tif (unsub) {\n\t\t\t\t\tunsub();\n\t\t\t\t\tthis.$$l_u.delete(listener);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.$$l[type]) {\n\t\t\t\tconst idx = this.$$l[type].indexOf(listener);\n\t\t\t\tif (idx >= 0) {\n\t\t\t\t\tthis.$$l[type].splice(idx, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tasync connectedCallback() {\n\t\t\tthis.$$cn = true;\n\t\t\tif (!this.$$c) {\n\t\t\t\t// We wait one tick to let possible child slot elements be created/mounted\n\t\t\t\tawait Promise.resolve();\n\t\t\t\tif (!this.$$cn || this.$$c) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tfunction create_slot(name) {\n\t\t\t\t\treturn () => {\n\t\t\t\t\t\tlet node;\n\t\t\t\t\t\tconst obj = {\n\t\t\t\t\t\t\tc: function create() {\n\t\t\t\t\t\t\t\tnode = element('slot');\n\t\t\t\t\t\t\t\tif (name !== 'default') {\n\t\t\t\t\t\t\t\t\tattr(node, 'name', name);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * @param {HTMLElement} target\n\t\t\t\t\t\t\t * @param {HTMLElement} [anchor]\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tm: function mount(target, anchor) {\n\t\t\t\t\t\t\t\tinsert(target, node, anchor);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\td: function destroy(detaching) {\n\t\t\t\t\t\t\t\tif (detaching) {\n\t\t\t\t\t\t\t\t\tdetach(node);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn obj;\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tconst $$slots = {};\n\t\t\t\tconst existing_slots = get_custom_elements_slots(this);\n\t\t\t\tfor (const name of this.$$s) {\n\t\t\t\t\tif (name in existing_slots) {\n\t\t\t\t\t\t$$slots[name] = [create_slot(name)];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (const attribute of this.attributes) {\n\t\t\t\t\t// this.$$data takes precedence over this.attributes\n\t\t\t\t\tconst name = this.$$g_p(attribute.name);\n\t\t\t\t\tif (!(name in this.$$d)) {\n\t\t\t\t\t\tthis.$$d[name] = get_custom_element_value(name, attribute.value, this.$$p_d, 'toProp');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Port over props that were set programmatically before ce was initialized\n\t\t\t\tfor (const key in this.$$p_d) {\n\t\t\t\t\tif (!(key in this.$$d) && this[key] !== undefined) {\n\t\t\t\t\t\tthis.$$d[key] = this[key]; // don't transform, these were set through JavaScript\n\t\t\t\t\t\tdelete this[key]; // remove the property that shadows the getter/setter\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.$$c = new this.$$ctor({\n\t\t\t\t\ttarget: this.shadowRoot || this,\n\t\t\t\t\tprops: {\n\t\t\t\t\t\t...this.$$d,\n\t\t\t\t\t\t$$slots,\n\t\t\t\t\t\t$$scope: {\n\t\t\t\t\t\t\tctx: []\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Reflect component props as attributes\n\t\t\t\tconst reflect_attributes = () => {\n\t\t\t\t\tthis.$$r = true;\n\t\t\t\t\tfor (const key in this.$$p_d) {\n\t\t\t\t\t\tthis.$$d[key] = this.$$c.$$.ctx[this.$$c.$$.props[key]];\n\t\t\t\t\t\tif (this.$$p_d[key].reflect) {\n\t\t\t\t\t\t\tconst attribute_value = get_custom_element_value(\n\t\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\t\tthis.$$d[key],\n\t\t\t\t\t\t\t\tthis.$$p_d,\n\t\t\t\t\t\t\t\t'toAttribute'\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (attribute_value == null) {\n\t\t\t\t\t\t\t\tthis.removeAttribute(this.$$p_d[key].attribute || key);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.setAttribute(this.$$p_d[key].attribute || key, attribute_value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis.$$r = false;\n\t\t\t\t};\n\t\t\t\tthis.$$c.$$.after_update.push(reflect_attributes);\n\t\t\t\treflect_attributes(); // once initially because after_update is added too late for first render\n\n\t\t\t\tfor (const type in this.$$l) {\n\t\t\t\t\tfor (const listener of this.$$l[type]) {\n\t\t\t\t\t\tconst unsub = this.$$c.$on(type, listener);\n\t\t\t\t\t\tthis.$$l_u.set(listener, unsub);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.$$l = {};\n\t\t\t}\n\t\t}\n\n\t\t// We don't need this when working within Svelte code, but for compatibility of people using this outside of Svelte\n\t\t// and setting attributes through setAttribute etc, this is helpful\n\t\tattributeChangedCallback(attr, _oldValue, newValue) {\n\t\t\tif (this.$$r) return;\n\t\t\tattr = this.$$g_p(attr);\n\t\t\tthis.$$d[attr] = get_custom_element_value(attr, newValue, this.$$p_d, 'toProp');\n\t\t\tthis.$$c?.$set({ [attr]: this.$$d[attr] });\n\t\t}\n\n\t\tdisconnectedCallback() {\n\t\t\tthis.$$cn = false;\n\t\t\t// In a microtask, because this could be a move within the DOM\n\t\t\tPromise.resolve().then(() => {\n\t\t\t\tif (!this.$$cn && this.$$c) {\n\t\t\t\t\tthis.$$c.$destroy();\n\t\t\t\t\tthis.$$c = undefined;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t$$g_p(attribute_name) {\n\t\t\treturn (\n\t\t\t\tObject.keys(this.$$p_d).find(\n\t\t\t\t\t(key) =>\n\t\t\t\t\t\tthis.$$p_d[key].attribute === attribute_name ||\n\t\t\t\t\t\t(!this.$$p_d[key].attribute && key.toLowerCase() === attribute_name)\n\t\t\t\t) || attribute_name\n\t\t\t);\n\t\t}\n\t};\n}\n\n/**\n * @param {string} prop\n * @param {any} value\n * @param {Record<string, CustomElementPropDefinition>} props_definition\n * @param {'toAttribute' | 'toProp'} [transform]\n */\nfunction get_custom_element_value(prop, value, props_definition, transform) {\n\tconst type = props_definition[prop]?.type;\n\tvalue = type === 'Boolean' && typeof value !== 'boolean' ? value != null : value;\n\tif (!transform || !props_definition[prop]) {\n\t\treturn value;\n\t} else if (transform === 'toAttribute') {\n\t\tswitch (type) {\n\t\t\tcase 'Object':\n\t\t\tcase 'Array':\n\t\t\t\treturn value == null ? null : JSON.stringify(value);\n\t\t\tcase 'Boolean':\n\t\t\t\treturn value ? '' : null;\n\t\t\tcase 'Number':\n\t\t\t\treturn value == null ? null : value;\n\t\t\tdefault:\n\t\t\t\treturn value;\n\t\t}\n\t} else {\n\t\tswitch (type) {\n\t\t\tcase 'Object':\n\t\t\tcase 'Array':\n\t\t\t\treturn value && JSON.parse(value);\n\t\t\tcase 'Boolean':\n\t\t\t\treturn value; // conversion already handled above\n\t\t\tcase 'Number':\n\t\t\t\treturn value != null ? +value : value;\n\t\t\tdefault:\n\t\t\t\treturn value;\n\t\t}\n\t}\n}\n\n/**\n * @internal\n *\n * Turn a Svelte component into a custom element.\n * @param {import('./public.js').ComponentType} Component  A Svelte component constructor\n * @param {Record<string, CustomElementPropDefinition>} props_definition  The props to observe\n * @param {string[]} slots  The slots to create\n * @param {string[]} accessors  Other accessors besides the ones for props the component has\n * @param {boolean} use_shadow_dom  Whether to use shadow DOM\n * @param {(ce: new () => HTMLElement) => new () => HTMLElement} [extend]\n */\nexport function create_custom_element(\n\tComponent,\n\tprops_definition,\n\tslots,\n\taccessors,\n\tuse_shadow_dom,\n\textend\n) {\n\tlet Class = class extends SvelteElement {\n\t\tconstructor() {\n\t\t\tsuper(Component, slots, use_shadow_dom);\n\t\t\tthis.$$p_d = props_definition;\n\t\t}\n\t\tstatic get observedAttributes() {\n\t\t\treturn Object.keys(props_definition).map((key) =>\n\t\t\t\t(props_definition[key].attribute || key).toLowerCase()\n\t\t\t);\n\t\t}\n\t};\n\tObject.keys(props_definition).forEach((prop) => {\n\t\tObject.defineProperty(Class.prototype, prop, {\n\t\t\tget() {\n\t\t\t\treturn this.$$c && prop in this.$$c ? this.$$c[prop] : this.$$d[prop];\n\t\t\t},\n\t\t\tset(value) {\n\t\t\t\tvalue = get_custom_element_value(prop, value, props_definition);\n\t\t\t\tthis.$$d[prop] = value;\n\t\t\t\tthis.$$c?.$set({ [prop]: value });\n\t\t\t}\n\t\t});\n\t});\n\taccessors.forEach((accessor) => {\n\t\tObject.defineProperty(Class.prototype, accessor, {\n\t\t\tget() {\n\t\t\t\treturn this.$$c?.[accessor];\n\t\t\t}\n\t\t});\n\t});\n\tif (extend) {\n\t\t// @ts-expect-error - assigning here is fine\n\t\tClass = extend(Class);\n\t}\n\tComponent.element = /** @type {any} */ (Class);\n\treturn Class;\n}\n\n/**\n * Base class for Svelte components. Used when dev=false.\n *\n * @template {Record<string, any>} [Props=any]\n * @template {Record<string, any>} [Events=any]\n */\nexport class SvelteComponent {\n\t/**\n\t * ### PRIVATE API\n\t *\n\t * Do not use, may change at any time\n\t *\n\t * @type {any}\n\t */\n\t$$ = undefined;\n\t/**\n\t * ### PRIVATE API\n\t *\n\t * Do not use, may change at any time\n\t *\n\t * @type {any}\n\t */\n\t$$set = undefined;\n\n\t/** @returns {void} */\n\t$destroy() {\n\t\tdestroy_component(this, 1);\n\t\tthis.$destroy = noop;\n\t}\n\n\t/**\n\t * @template {Extract<keyof Events, string>} K\n\t * @param {K} type\n\t * @param {((e: Events[K]) => void) | null | undefined} callback\n\t * @returns {() => void}\n\t */\n\t$on(type, callback) {\n\t\tif (!is_function(callback)) {\n\t\t\treturn noop;\n\t\t}\n\t\tconst callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);\n\t\tcallbacks.push(callback);\n\t\treturn () => {\n\t\t\tconst index = callbacks.indexOf(callback);\n\t\t\tif (index !== -1) callbacks.splice(index, 1);\n\t\t};\n\t}\n\n\t/**\n\t * @param {Partial<Props>} props\n\t * @returns {void}\n\t */\n\t$set(props) {\n\t\tif (this.$$set && !is_empty(props)) {\n\t\t\tthis.$$.skip_bound = true;\n\t\t\tthis.$$set(props);\n\t\t\tthis.$$.skip_bound = false;\n\t\t}\n\t}\n}\n\n/**\n * @typedef {Object} CustomElementPropDefinition\n * @property {string} [attribute]\n * @property {boolean} [reflect]\n * @property {'String'|'Boolean'|'Number'|'Array'|'Object'} [type]\n */\n","<script>\n\texport let clusterData;\n\texport let totalNodes;\n\t\n\t$: healthSummary = clusterData.health_summary || {};\n\t$: healthyNodes = healthSummary.healthy_nodes || 0;\n\t$: healthPercentage = healthSummary.health_percentage || 0;\n\t$: status = healthSummary.status || 'unknown';\n\t$: topology = clusterData.topology || 'unknown';\n\t\n\tfunction getStatusColor(status) {\n\t\tswitch (status) {\n\t\t\tcase 'healthy': return '#28a745';\n\t\t\tcase 'degraded': return '#ffc107';\n\t\t\tcase 'critical': return '#dc3545';\n\t\t\tdefault: return '#6c757d';\n\t\t}\n\t}\n</script>\n\n<div class=\"cluster-overview\">\n\t<h2>📊 Cluster Overview</h2>\n\t\n\t<div class=\"overview-grid\">\n\t\t<div class=\"metric-card\">\n\t\t\t<div class=\"metric-icon\">🖥️</div>\n\t\t\t<div class=\"metric-content\">\n\t\t\t\t<h3>Total Nodes</h3>\n\t\t\t\t<div class=\"metric-value\">{totalNodes}</div>\n\t\t\t\t<div class=\"metric-subtext\">{healthyNodes} healthy</div>\n\t\t\t</div>\n\t\t</div>\n\t\t\n\t\t<div class=\"metric-card\">\n\t\t\t<div class=\"metric-icon\">❤️</div>\n\t\t\t<div class=\"metric-content\">\n\t\t\t\t<h3>Cluster Health</h3>\n\t\t\t\t<div class=\"metric-value\" style=\"color: {getStatusColor(status)}\">\n\t\t\t\t\t{healthPercentage.toFixed(1)}%\n\t\t\t\t</div>\n\t\t\t\t<div class=\"metric-subtext\">{status.toUpperCase()}</div>\n\t\t\t</div>\n\t\t</div>\n\t\t\n\t\t<div class=\"metric-card\">\n\t\t\t<div class=\"metric-icon\">🌐</div>\n\t\t\t<div class=\"metric-content\">\n\t\t\t\t<h3>Topology</h3>\n\t\t\t\t<div class=\"metric-value\">{topology}</div>\n\t\t\t\t<div class=\"metric-subtext\">consensus mode</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n\n<style>\n\t.cluster-overview {\n\t\tbackground: rgba(255, 255, 255, 0.95);\n\t\tborder-radius: 12px;\n\t\tpadding: 20px;\n\t\tbox-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n\t\tbackdrop-filter: blur(10px);\n\t}\n\t\n\t.cluster-overview h2 {\n\t\tmargin: 0 0 20px 0;\n\t\tcolor: #333;\n\t\tfont-size: 1.4rem;\n\t}\n\t\n\t.overview-grid {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: 1fr;\n\t\tgap: 15px;\n\t}\n\t\n\t.metric-card {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 15px;\n\t\tpadding: 15px;\n\t\tbackground: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);\n\t\tborder-radius: 8px;\n\t\tborder: 1px solid #e9ecef;\n\t\ttransition: transform 0.2s ease;\n\t}\n\t\n\t.metric-card:hover {\n\t\ttransform: translateY(-2px);\n\t\tbox-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n\t}\n\t\n\t.metric-icon {\n\t\tfont-size: 2rem;\n\t\topacity: 0.8;\n\t}\n\t\n\t.metric-content h3 {\n\t\tmargin: 0;\n\t\tfont-size: 0.9rem;\n\t\tcolor: #666;\n\t\ttext-transform: uppercase;\n\t\tfont-weight: 600;\n\t\tletter-spacing: 0.5px;\n\t}\n\t\n\t.metric-value {\n\t\tfont-size: 1.8rem;\n\t\tfont-weight: bold;\n\t\tcolor: #333;\n\t\tmargin: 5px 0;\n\t\tline-height: 1;\n\t}\n\t\n\t.metric-subtext {\n\t\tfont-size: 0.8rem;\n\t\tcolor: #666;\n\t\tmargin: 0;\n\t}\n\t\n\t@media (min-width: 600px) {\n\t\t.overview-grid {\n\t\t\tgrid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n\t\t}\n\t}\n</style>\n","import { PUBLIC_VERSION } from '../../../shared/version.js';\n\nif (typeof window !== 'undefined')\n\t// @ts-ignore\n\t(window.__svelte || (window.__svelte = { v: new Set() })).v.add(PUBLIC_VERSION);\n","// generated during release, do not modify\n\n/**\n * The current version, as set in package.json.\n *\n * https://svelte.dev/docs/svelte-compiler#svelte-version\n * @type {string}\n */\nexport const VERSION = '4.2.20';\nexport const PUBLIC_VERSION = '4';\n","<script>\n\texport let nodes;\n\texport let serverStats;\n\texport let onFailover;\n\t\n\t$: nodeList = Object.entries(nodes || {}).map(([id, node]) => ({\n\t\t...node,\n\t\tstats: serverStats[id] || {}\n\t}));\n\t\n\tfunction getHealthClass(health) {\n\t\tswitch (health) {\n\t\t\tcase 'healthy': return 'node-healthy';\n\t\t\tcase 'degraded': return 'node-degraded';\n\t\t\tcase 'failed': return 'node-failed';\n\t\t\tdefault: return 'node-unknown';\n\t\t}\n\t}\n\t\n\tfunction getRoleClass(role) {\n\t\tswitch (role) {\n\t\t\tcase 'primary': return 'role-primary';\n\t\t\tcase 'replica': return 'role-replica';\n\t\t\tcase 'leader': return 'role-leader';\n\t\t\tdefault: return 'role-unknown';\n\t\t}\n\t}\n\t\n\tfunction formatUptime(uptime) {\n\t\tif (!uptime) return '0h';\n\t\treturn `${(uptime / 3600).toFixed(1)}h`;\n\t}\n</script>\n\n<div class=\"node-grid\">\n\t<h2>🖥️ Database Nodes</h2>\n\t\n\t{#if nodeList.length === 0}\n\t\t<div class=\"no-nodes\">\n\t\t\t<div class=\"no-nodes-icon\">🔍</div>\n\t\t\t<p>No nodes discovered yet</p>\n\t\t</div>\n\t{:else}\n\t\t<div class=\"nodes-container\">\n\t\t\t{#each nodeList as node (node.node_id)}\n\t\t\t\t<div class=\"node-card {getHealthClass(node.health)}\">\n\t\t\t\t\t<div class=\"node-header\">\n\t\t\t\t\t\t<div class=\"node-id\">{node.node_id}</div>\n\t\t\t\t\t\t<div class=\"node-role {getRoleClass(node.role)}\">\n\t\t\t\t\t\t\t{node.role || 'unknown'}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\n\t\t\t\t\t<div class=\"node-details\">\n\t\t\t\t\t\t<div class=\"detail-row\">\n\t\t\t\t\t\t\t<span class=\"detail-label\">Host:</span>\n\t\t\t\t\t\t\t<span class=\"detail-value\">{node.host}:{node.port}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div class=\"detail-row\">\n\t\t\t\t\t\t\t<span class=\"detail-label\">Health:</span>\n\t\t\t\t\t\t\t<span class=\"detail-value\">{node.health || 'unknown'}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div class=\"detail-row\">\n\t\t\t\t\t\t\t<span class=\"detail-label\">Uptime:</span>\n\t\t\t\t\t\t\t<span class=\"detail-value\">{formatUptime(node.uptime)}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div class=\"detail-row\">\n\t\t\t\t\t\t\t<span class=\"detail-label\">Connections:</span>\n\t\t\t\t\t\t\t<span class=\"detail-value\">{node.connections || 0}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div class=\"detail-row\">\n\t\t\t\t\t\t\t<span class=\"detail-label\">RAFT State:</span>\n\t\t\t\t\t\t\t<span class=\"detail-value\">{node.raft_state || 'unknown'}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div class=\"detail-row\">\n\t\t\t\t\t\t\t<span class=\"detail-label\">Repl. Lag:</span>\n\t\t\t\t\t\t\t<span class=\"detail-value\">{node.replication_lag || 0}ms</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t{#if node.stats && node.stats.performance}\n\t\t\t\t\t\t\t<div class=\"detail-row\">\n\t\t\t\t\t\t\t\t<span class=\"detail-label\">CPU:</span>\n\t\t\t\t\t\t\t\t<span class=\"detail-value\">{node.stats.performance.cpu_usage?.toFixed(1) || 0}%</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<div class=\"detail-row\">\n\t\t\t\t\t\t\t\t<span class=\"detail-label\">Memory:</span>\n\t\t\t\t\t\t\t\t<span class=\"detail-value\">{node.stats.performance.memory_usage?.toFixed(1) || 0}%</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t</div>\n\t\t\t\t\t\n\t\t\t\t\t<div class=\"node-actions\">\n\t\t\t\t\t\t{#if node.role !== 'primary' && node.health === 'healthy'}\n\t\t\t\t\t\t\t<button \n\t\t\t\t\t\t\t\tclass=\"promote-btn\"\n\t\t\t\t\t\t\t\ton:click={() => onFailover(node.node_id)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tPromote to Primary\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t{:else if node.role === 'primary'}\n\t\t\t\t\t\t\t<div class=\"primary-badge\">PRIMARY</div>\n\t\t\t\t\t\t{:else}\n\t\t\t\t\t\t\t<div class=\"unavailable-badge\">Not Available</div>\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t{/each}\n\t\t</div>\n\t{/if}\n</div>\n\n<style>\n\t.node-grid {\n\t\tbackground: rgba(255, 255, 255, 0.95);\n\t\tborder-radius: 12px;\n\t\tpadding: 20px;\n\t\tbox-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n\t\tbackdrop-filter: blur(10px);\n\t}\n\t\n\t.node-grid h2 {\n\t\tmargin: 0 0 20px 0;\n\t\tcolor: #333;\n\t\tfont-size: 1.4rem;\n\t}\n\t\n\t.no-nodes {\n\t\ttext-align: center;\n\t\tpadding: 40px;\n\t\tcolor: #666;\n\t}\n\t\n\t.no-nodes-icon {\n\t\tfont-size: 3rem;\n\t\tmargin-bottom: 15px;\n\t\topacity: 0.6;\n\t}\n\t\n\t.nodes-container {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: repeat(auto-fill, minmax(350px, 1fr));\n\t\tgap: 20px;\n\t}\n\t\n\t.node-card {\n\t\tpadding: 20px;\n\t\tborder-radius: 10px;\n\t\tborder: 1px solid #e9ecef;\n\t\ttransition: all 0.3s ease;\n\t\tposition: relative;\n\t}\n\t\n\t.node-card:hover {\n\t\ttransform: translateY(-3px);\n\t\tbox-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);\n\t}\n\t\n\t.node-healthy {\n\t\tbackground: linear-gradient(135deg, #d4edda 0%, #ffffff 100%);\n\t\tborder-left: 4px solid #28a745;\n\t}\n\t\n\t.node-degraded {\n\t\tbackground: linear-gradient(135deg, #fff3cd 0%, #ffffff 100%);\n\t\tborder-left: 4px solid #ffc107;\n\t}\n\t\n\t.node-failed {\n\t\tbackground: linear-gradient(135deg, #f8d7da 0%, #ffffff 100%);\n\t\tborder-left: 4px solid #dc3545;\n\t}\n\t\n\t.node-unknown {\n\t\tbackground: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);\n\t\tborder-left: 4px solid #6c757d;\n\t}\n\t\n\t.node-header {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t\tmargin-bottom: 15px;\n\t}\n\t\n\t.node-id {\n\t\tfont-size: 1.1rem;\n\t\tfont-weight: bold;\n\t\tcolor: #333;\n\t}\n\t\n\t.node-role {\n\t\tpadding: 4px 12px;\n\t\tborder-radius: 20px;\n\t\tfont-size: 0.8rem;\n\t\tfont-weight: bold;\n\t\ttext-transform: uppercase;\n\t}\n\t\n\t.role-primary, .role-leader {\n\t\tbackground: #007bff;\n\t\tcolor: white;\n\t}\n\t\n\t.role-replica {\n\t\tbackground: #28a745;\n\t\tcolor: white;\n\t}\n\t\n\t.role-unknown {\n\t\tbackground: #6c757d;\n\t\tcolor: white;\n\t}\n\t\n\t.node-details {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: 1fr 1fr;\n\t\tgap: 8px;\n\t\tmargin-bottom: 15px;\n\t}\n\t\n\t.detail-row {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\tfont-size: 0.9rem;\n\t\tpadding: 4px 0;\n\t}\n\t\n\t.detail-label {\n\t\tcolor: #666;\n\t\tfont-weight: 500;\n\t}\n\t\n\t.detail-value {\n\t\tcolor: #333;\n\t\tfont-weight: 600;\n\t}\n\t\n\t.node-actions {\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t}\n\t\n\t.promote-btn {\n\t\tbackground: #28a745;\n\t\tcolor: white;\n\t\tborder: none;\n\t\tpadding: 8px 16px;\n\t\tborder-radius: 6px;\n\t\tcursor: pointer;\n\t\tfont-weight: 600;\n\t\ttransition: background-color 0.2s ease;\n\t}\n\t\n\t.promote-btn:hover {\n\t\tbackground: #218838;\n\t}\n\t\n\t.primary-badge {\n\t\tbackground: #007bff;\n\t\tcolor: white;\n\t\tpadding: 8px 16px;\n\t\tborder-radius: 6px;\n\t\tfont-weight: bold;\n\t\tfont-size: 0.8rem;\n\t}\n\t\n\t.unavailable-badge {\n\t\tbackground: #6c757d;\n\t\tcolor: white;\n\t\tpadding: 8px 16px;\n\t\tborder-radius: 6px;\n\t\tfont-weight: bold;\n\t\tfont-size: 0.8rem;\n\t}\n\t\n\t@media (max-width: 768px) {\n\t\t.nodes-container {\n\t\t\tgrid-template-columns: 1fr;\n\t\t}\n\t}\n</style>\n","<script>\n\texport let metrics;\n\texport let healthSummary;\n\t\n\t$: discoveryRuns = metrics.discovery_runs || 0;\n\t$: failovers = metrics.failovers_executed || 0;\n\t$: lastDiscovery = metrics.last_discovery;\n\t$: totalNodes = metrics.total_nodes_discovered || 0;\n\t$: healthyNodes = metrics.healthy_nodes || 0;\n\t$: failedNodes = metrics.failed_nodes || 0;\n\t$: healthPercentage = healthSummary.health_percentage || 0;\n\t\n\tfunction formatTime(isoString) {\n\t\tif (!isoString) return 'Never';\n\t\treturn new Date(isoString).toLocaleTimeString();\n\t}\n</script>\n\n<div class=\"metrics-panel\">\n\t<h2>📈 System Metrics</h2>\n\t\n\t<div class=\"metrics-grid\">\n\t\t<div class=\"metric-item\">\n\t\t\t<div class=\"metric-label\">Discovery Runs</div>\n\t\t\t<div class=\"metric-value\">{discoveryRuns}</div>\n\t\t</div>\n\t\t\n\t\t<div class=\"metric-item\">\n\t\t\t<div class=\"metric-label\">Failovers</div>\n\t\t\t<div class=\"metric-value failover-count\">{failovers}</div>\n\t\t</div>\n\t\t\n\t\t<div class=\"metric-item\">\n\t\t\t<div class=\"metric-label\">Healthy Nodes</div>\n\t\t\t<div class=\"metric-value healthy-count\">{healthyNodes}</div>\n\t\t</div>\n\t\t\n\t\t<div class=\"metric-item\">\n\t\t\t<div class=\"metric-label\">Failed Nodes</div>\n\t\t\t<div class=\"metric-value failed-count\">{failedNodes}</div>\n\t\t</div>\n\t\t\n\t\t<div class=\"metric-item\">\n\t\t\t<div class=\"metric-label\">Health</div>\n\t\t\t<div class=\"metric-value health-percentage\" data-health={healthSummary.status}>{healthPercentage.toFixed(1)}%</div>\n\t\t</div>\n\t\t\n\t\t<div class=\"metric-item full-width\">\n\t\t\t<div class=\"metric-label\">Last Discovery</div>\n\t\t\t<div class=\"metric-value time-value\">{formatTime(lastDiscovery)}</div>\n\t\t</div>\n\t</div>\n</div>\n\n<style>\n\t.metrics-panel {\n\t\tbackground: rgba(255, 255, 255, 0.95);\n\t\tborder-radius: 12px;\n\t\tpadding: 20px;\n\t\tbox-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n\t\tbackdrop-filter: blur(10px);\n\t}\n\t\n\t.metrics-panel h2 {\n\t\tmargin: 0 0 20px 0;\n\t\tcolor: #333;\n\t\tfont-size: 1.4rem;\n\t}\n\t\n\t.metrics-grid {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: 1fr 1fr;\n\t\tgap: 15px;\n\t}\n\t\n\t.metric-item {\n\t\tpadding: 15px;\n\t\tbackground: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);\n\t\tborder-radius: 8px;\n\t\tborder: 1px solid #e9ecef;\n\t\ttext-align: center;\n\t\ttransition: transform 0.2s ease;\n\t}\n\t\n\t.metric-item:hover {\n\t\ttransform: translateY(-2px);\n\t}\n\t\n\t.metric-item.full-width {\n\t\tgrid-column: 1 / -1;\n\t}\n\t\n\t.metric-label {\n\t\tfont-size: 0.85rem;\n\t\tcolor: #666;\n\t\ttext-transform: uppercase;\n\t\tfont-weight: 600;\n\t\tletter-spacing: 0.5px;\n\t\tmargin-bottom: 8px;\n\t}\n\t\n\t.metric-value {\n\t\tfont-size: 1.6rem;\n\t\tfont-weight: bold;\n\t\tcolor: #333;\n\t}\n\t\n\t.failover-count {\n\t\tcolor: #ffc107;\n\t}\n\t\n\t.health-percentage {\n\t\tcolor: #28a745;\n\t}\n\t\n\t.health-percentage[data-health=\"critical\"] {\n\t\tcolor: #dc3545;\n\t}\n\t\n\t.health-percentage[data-health=\"degraded\"] {\n\t\tcolor: #ffc107;\n\t}\n\t\n\t.healthy-count {\n\t\tcolor: #28a745;\n\t}\n\t\n\t.failed-count {\n\t\tcolor: #dc3545;\n\t}\n\t\n\t.time-value {\n\t\tfont-size: 1.2rem;\n\t\tcolor: #007bff;\n\t}\n</style>\n","<script>\n\texport let data;\n\texport let onNodeClick = () => {};\n\t\n\timport { onMount } from 'svelte';\n\t\n\tlet container;\n\tlet network = null;\n\t\n\t$: if (data && data.nodes && container) {\n\t\tupdateTopology();\n\t}\n\t\n\tonMount(() => {\n\t\t// Simple topology visualization without external dependencies\n\t\tupdateTopology();\n\t});\n\t\n\tfunction updateTopology() {\n\t\tif (!container || !data || !data.nodes) return;\n\t\t\n\t\t// Clear existing content\n\t\tcontainer.innerHTML = '';\n\t\t\n\t\t// Create simple SVG topology\n\t\tconst svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n\t\tsvg.setAttribute('width', '100%');\n\t\tsvg.setAttribute('height', '400');\n\t\tsvg.setAttribute('viewBox', '0 0 800 400');\n\t\t\n\t\tconst nodes = data.nodes || [];\n\t\tif (nodes.length === 0) {\n\t\t\t// Show empty state\n\t\t\tconst text = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n\t\t\ttext.setAttribute('x', '400');\n\t\t\ttext.setAttribute('y', '200');\n\t\t\ttext.setAttribute('text-anchor', 'middle');\n\t\t\ttext.setAttribute('fill', '#666');\n\t\t\ttext.setAttribute('font-size', '16');\n\t\t\ttext.textContent = 'No topology data available';\n\t\t\tsvg.appendChild(text);\n\t\t\tcontainer.appendChild(svg);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// Position nodes in a simple layout\n\t\tconst centerX = 400;\n\t\tconst centerY = 200;\n\t\tconst radius = 120;\n\t\t\n\t\tnodes.forEach((node, index) => {\n\t\t\tconst angle = (index / nodes.length) * 2 * Math.PI;\n\t\t\tconst x = centerX + Math.cos(angle) * radius;\n\t\t\tconst y = centerY + Math.sin(angle) * radius;\n\t\t\t\n\t\t\t// Create node circle\n\t\t\tconst circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n\t\t\tcircle.setAttribute('cx', x);\n\t\t\tcircle.setAttribute('cy', y);\n\t\t\tcircle.setAttribute('r', '30');\n\t\t\t\n\t\t\t// Color based on role\n\t\t\tlet fill = '#6c757d'; // default\n\t\t\tif (node.role === 'primary_master') fill = '#dc3545';\n\t\t\telse if (node.role === 'semi_master') fill = '#fd7e14';\n\t\t\telse if (node.role === 'replica') fill = '#28a745';\n\t\t\t\n\t\t\tcircle.setAttribute('fill', fill);\n\t\t\tcircle.setAttribute('stroke', '#333');\n\t\t\tcircle.setAttribute('stroke-width', '2');\n\t\t\tcircle.style.cursor = 'pointer';\n\t\t\t\n\t\t\t// Add click handler\n\t\t\tcircle.addEventListener('click', () => onNodeClick(node.id));\n\t\t\t\n\t\t\tsvg.appendChild(circle);\n\t\t\t\n\t\t\t// Add node label\n\t\t\tconst text = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n\t\t\ttext.setAttribute('x', x);\n\t\t\ttext.setAttribute('y', y + 5);\n\t\t\ttext.setAttribute('text-anchor', 'middle');\n\t\t\ttext.setAttribute('fill', 'white');\n\t\t\ttext.setAttribute('font-size', '12');\n\t\t\ttext.setAttribute('font-weight', 'bold');\n\t\t\ttext.textContent = node.id ? node.id.split('-')[1] || node.id.slice(-4) : 'N/A';\n\t\t\ttext.style.pointerEvents = 'none';\n\t\t\tsvg.appendChild(text);\n\t\t\t\n\t\t\t// Add node info below\n\t\t\tconst infoText = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n\t\t\tinfoText.setAttribute('x', x);\n\t\t\tinfoText.setAttribute('y', y + 45);\n\t\t\tinfoText.setAttribute('text-anchor', 'middle');\n\t\t\tinfoText.setAttribute('fill', '#333');\n\t\t\tinfoText.setAttribute('font-size', '10');\n\t\t\tinfoText.textContent = node.health || 'unknown';\n\t\t\tsvg.appendChild(infoText);\n\t\t});\n\t\t\n\t\t// Draw edges\n\t\tconst edges = data.edges || [];\n\t\tedges.forEach(edge => {\n\t\t\tconst fromNode = nodes.find(n => n.id === edge.from);\n\t\t\tconst toNode = nodes.find(n => n.id === edge.to);\n\t\t\t\n\t\t\tif (fromNode && toNode) {\n\t\t\t\tconst fromIndex = nodes.indexOf(fromNode);\n\t\t\t\tconst toIndex = nodes.indexOf(toNode);\n\t\t\t\t\n\t\t\t\tconst fromAngle = (fromIndex / nodes.length) * 2 * Math.PI;\n\t\t\t\tconst toAngle = (toIndex / nodes.length) * 2 * Math.PI;\n\t\t\t\t\n\t\t\t\tconst fromX = centerX + Math.cos(fromAngle) * radius;\n\t\t\t\tconst fromY = centerY + Math.sin(fromAngle) * radius;\n\t\t\t\tconst toX = centerX + Math.cos(toAngle) * radius;\n\t\t\t\tconst toY = centerY + Math.sin(toAngle) * radius;\n\t\t\t\t\n\t\t\t\tconst line = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n\t\t\t\tline.setAttribute('x1', fromX);\n\t\t\t\tline.setAttribute('y1', fromY);\n\t\t\t\tline.setAttribute('x2', toX);\n\t\t\t\tline.setAttribute('y2', toY);\n\t\t\t\tline.setAttribute('stroke', '#666');\n\t\t\t\tline.setAttribute('stroke-width', '2');\n\t\t\t\tline.setAttribute('opacity', '0.6');\n\t\t\t\t\n\t\t\t\tsvg.insertBefore(line, svg.firstChild); // Add behind nodes\n\t\t\t}\n\t\t});\n\t\t\n\t\tcontainer.appendChild(svg);\n\t}\n</script>\n\n<div class=\"topology-graph\">\n\t<h2>🌐 Cluster Topology</h2>\n\t\n\t<div class=\"topology-controls\">\n\t\t<div class=\"legend\">\n\t\t\t<div class=\"legend-item\">\n\t\t\t\t<div class=\"legend-color primary\"></div>\n\t\t\t\t<span>Primary Master</span>\n\t\t\t</div>\n\t\t\t<div class=\"legend-item\">\n\t\t\t\t<div class=\"legend-color semi\"></div>\n\t\t\t\t<span>Semi Master</span>\n\t\t\t</div>\n\t\t\t<div class=\"legend-item\">\n\t\t\t\t<div class=\"legend-color replica\"></div>\n\t\t\t\t<span>Replica</span>\n\t\t\t</div>\n\t\t\t<div class=\"legend-item\">\n\t\t\t\t<div class=\"legend-color offline\"></div>\n\t\t\t\t<span>Offline</span>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t\n\t<div class=\"topology-container\" bind:this={container}>\n\t\t<!-- SVG topology will be inserted here -->\n\t</div>\n</div>\n\n<style>\n\t.topology-graph {\n\t\tbackground: rgba(255, 255, 255, 0.95);\n\t\tborder-radius: 12px;\n\t\tpadding: 20px;\n\t\tbox-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n\t\tbackdrop-filter: blur(10px);\n\t}\n\t\n\t.topology-graph h2 {\n\t\tmargin: 0 0 20px 0;\n\t\tcolor: #333;\n\t\tfont-size: 1.4rem;\n\t}\n\t\n\t.topology-controls {\n\t\tmargin-bottom: 15px;\n\t}\n\t\n\t.legend {\n\t\tdisplay: flex;\n\t\tgap: 20px;\n\t\tflex-wrap: wrap;\n\t\tfont-size: 0.9rem;\n\t}\n\t\n\t.legend-item {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 6px;\n\t}\n\t\n\t.legend-color {\n\t\twidth: 16px;\n\t\theight: 16px;\n\t\tborder-radius: 50%;\n\t\tborder: 1px solid #333;\n\t}\n\t\n\t.legend-color.primary {\n\t\tbackground: #dc3545;\n\t}\n\t\n\t.legend-color.semi {\n\t\tbackground: #fd7e14;\n\t}\n\t\n\t.legend-color.replica {\n\t\tbackground: #28a745;\n\t}\n\t\n\t.legend-color.offline {\n\t\tbackground: #6c757d;\n\t}\n\t\n\t.topology-container {\n\t\tmin-height: 400px;\n\t\tborder: 1px solid #e9ecef;\n\t\tborder-radius: 8px;\n\t\tbackground: #f8f9fa;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t}\n\t\n\t.topology-container :global(svg) {\n\t\tmax-width: 100%;\n\t\theight: auto;\n\t}\n</style>\n","<script>\n\timport { onMount } from 'svelte';\n\t\n\tlet logs = [];\n\tlet loading = false;\n\t\n\tonMount(() => {\n\t\t// Initialize with some sample logs since we don't have a real log endpoint\n\t\tgenerateSampleLogs();\n\t});\n\t\n\tfunction generateSampleLogs() {\n\t\tconst sampleEvents = [\n\t\t\t{ level: 'info', message: 'Discovery loop started', timestamp: new Date().toISOString() },\n\t\t\t{ level: 'info', message: 'Found 3 nodes in cluster', timestamp: new Date(Date.now() - 30000).toISOString() },\n\t\t\t{ level: 'warning', message: 'Node localhost-9998 marked as degraded', timestamp: new Date(Date.now() - 60000).toISOString() },\n\t\t\t{ level: 'info', message: 'Health monitoring loop active', timestamp: new Date(Date.now() - 90000).toISOString() },\n\t\t\t{ level: 'info', message: 'HMSSQL Database Orchestrator started', timestamp: new Date(Date.now() - 120000).toISOString() }\n\t\t];\n\t\tlogs = sampleEvents;\n\t}\n\t\n\tfunction formatTimestamp(isoString) {\n\t\treturn new Date(isoString).toLocaleTimeString();\n\t}\n\t\n\tfunction getLevelClass(level) {\n\t\tswitch (level) {\n\t\t\tcase 'error': return 'log-error';\n\t\t\tcase 'warning': return 'log-warning';\n\t\t\tcase 'info': return 'log-info';\n\t\t\tdefault: return 'log-default';\n\t\t}\n\t}\n\t\n\tfunction refreshLogs() {\n\t\tloading = true;\n\t\t// Simulate API call\n\t\tsetTimeout(() => {\n\t\t\tgenerateSampleLogs();\n\t\t\tloading = false;\n\t\t}, 500);\n\t}\n</script>\n\n<div class=\"log-viewer\">\n\t<div class=\"log-header\">\n\t\t<h2>📋 Recent Events</h2>\n\t\t<button \n\t\t\tclass=\"refresh-logs-btn\" \n\t\t\tclass:loading \n\t\t\ton:click={refreshLogs}\n\t\t\tdisabled={loading}\n\t\t>\n\t\t\t{loading ? '🔄' : '↻'} Refresh\n\t\t</button>\n\t</div>\n\t\n\t<div class=\"log-container\">\n\t\t{#if logs.length === 0}\n\t\t\t<div class=\"no-logs\">\n\t\t\t\t<div class=\"no-logs-icon\">📝</div>\n\t\t\t\t<p>No recent events</p>\n\t\t\t</div>\n\t\t{:else}\n\t\t\t{#each logs as log}\n\t\t\t\t<div class=\"log-entry {getLevelClass(log.level)}\">\n\t\t\t\t\t<div class=\"log-time\">{formatTimestamp(log.timestamp)}</div>\n\t\t\t\t\t<div class=\"log-level\">{log.level.toUpperCase()}</div>\n\t\t\t\t\t<div class=\"log-message\">{log.message}</div>\n\t\t\t\t</div>\n\t\t\t{/each}\n\t\t{/if}\n\t</div>\n</div>\n\n<style>\n\t.log-viewer {\n\t\tbackground: rgba(255, 255, 255, 0.95);\n\t\tborder-radius: 12px;\n\t\tpadding: 20px;\n\t\tbox-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n\t\tbackdrop-filter: blur(10px);\n\t}\n\t\n\t.log-header {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t\tmargin-bottom: 20px;\n\t}\n\t\n\t.log-header h2 {\n\t\tmargin: 0;\n\t\tcolor: #333;\n\t\tfont-size: 1.4rem;\n\t}\n\t\n\t.refresh-logs-btn {\n\t\tbackground: #007bff;\n\t\tcolor: white;\n\t\tborder: none;\n\t\tpadding: 8px 12px;\n\t\tborder-radius: 6px;\n\t\tcursor: pointer;\n\t\tfont-size: 0.9rem;\n\t\ttransition: all 0.2s ease;\n\t}\n\t\n\t.refresh-logs-btn:hover:not(:disabled) {\n\t\tbackground: #0056b3;\n\t}\n\t\n\t.refresh-logs-btn:disabled {\n\t\topacity: 0.6;\n\t\tcursor: not-allowed;\n\t}\n\t\n\t.refresh-logs-btn.loading {\n\t\tanimation: spin 1s linear infinite;\n\t}\n\t\n\t@keyframes spin {\n\t\tfrom { transform: rotate(0deg); }\n\t\tto { transform: rotate(360deg); }\n\t}\n\t\n\t.log-container {\n\t\tbackground: #f8f9fa;\n\t\tborder-radius: 8px;\n\t\tpadding: 15px;\n\t\tmax-height: 300px;\n\t\toverflow-y: auto;\n\t\tfont-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;\n\t\tfont-size: 0.85rem;\n\t\tline-height: 1.4;\n\t}\n\t\n\t.no-logs {\n\t\ttext-align: center;\n\t\tpadding: 40px;\n\t\tcolor: #666;\n\t}\n\t\n\t.no-logs-icon {\n\t\tfont-size: 2rem;\n\t\tmargin-bottom: 10px;\n\t\topacity: 0.6;\n\t}\n\t\n\t.log-entry {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: auto auto 1fr;\n\t\tgap: 12px;\n\t\tpadding: 8px 0;\n\t\tborder-bottom: 1px solid #e9ecef;\n\t\talign-items: baseline;\n\t}\n\t\n\t.log-entry:last-child {\n\t\tborder-bottom: none;\n\t}\n\t\n\t.log-time {\n\t\tcolor: #666;\n\t\tfont-size: 0.8rem;\n\t\twhite-space: nowrap;\n\t}\n\t\n\t.log-level {\n\t\tfont-weight: bold;\n\t\tfont-size: 0.75rem;\n\t\tpadding: 2px 6px;\n\t\tborder-radius: 4px;\n\t\twhite-space: nowrap;\n\t}\n\t\n\t.log-message {\n\t\tcolor: #333;\n\t}\n\t\n\t.log-info .log-level {\n\t\tbackground: #cce5ff;\n\t\tcolor: #004085;\n\t}\n\t\n\t.log-warning .log-level {\n\t\tbackground: #fff3cd;\n\t\tcolor: #856404;\n\t}\n\t\n\t.log-error .log-level {\n\t\tbackground: #f8d7da;\n\t\tcolor: #721c24;\n\t}\n\t\n\t.log-default .log-level {\n\t\tbackground: #e2e3e5;\n\t\tcolor: #383d41;\n\t}\n\t\n\t/* Custom scrollbar */\n\t.log-container::-webkit-scrollbar {\n\t\twidth: 6px;\n\t}\n\t\n\t.log-container::-webkit-scrollbar-track {\n\t\tbackground: #f1f1f1;\n\t\tborder-radius: 3px;\n\t}\n\t\n\t.log-container::-webkit-scrollbar-thumb {\n\t\tbackground: #c1c1c1;\n\t\tborder-radius: 3px;\n\t}\n\t\n\t.log-container::-webkit-scrollbar-thumb:hover {\n\t\tbackground: #a8a8a8;\n\t}\n</style>\n","<script>\n\timport { onMount } from 'svelte';\n\timport ClusterOverview from './components/ClusterOverview.svelte';\n\timport NodeGrid from './components/NodeGrid.svelte';\n\timport MetricsPanel from './components/MetricsPanel.svelte';\n\timport TopologyGraph from './components/TopologyGraph.svelte';\n\timport LogViewer from './components/LogViewer.svelte';\n\t\n\tlet clusterData = {\n\t\tnodes: {},\n\t\tmetrics: {},\n\t\thealth_summary: {},\n\t\ttopology: 'unknown'\n\t};\n\t\n\tlet serverStats = {};\n\tlet topologyData = { nodes: [], edges: [] };\n\tlet refreshing = false;\n\tlet lastRefresh = null;\n\t\n\t// Auto-refresh interval\n\tlet refreshInterval = 10000; // 10 seconds\n\t\n\tonMount(() => {\n\t\trefreshData();\n\t\tconst interval = setInterval(refreshData, refreshInterval);\n\t\treturn () => clearInterval(interval);\n\t});\n\t\n\tasync function refreshData() {\n\t\tif (refreshing) return;\n\t\trefreshing = true;\n\t\t\n\t\ttry {\n\t\t\t// Fetch cluster status\n\t\t\tconst clusterResponse = await fetch('/api/cluster/status');\n\t\t\tif (clusterResponse.ok) {\n\t\t\t\tclusterData = await clusterResponse.json();\n\t\t\t}\n\t\t\t\n\t\t\t// Fetch server stats\n\t\t\tconst statsResponse = await fetch('/api/stats/servers');\n\t\t\tif (statsResponse.ok) {\n\t\t\t\tserverStats = await statsResponse.json();\n\t\t\t}\n\t\t\t\n\t\t\t// Fetch topology data\n\t\t\tconst topologyResponse = await fetch('/api/topology/graph');\n\t\t\tif (topologyResponse.ok) {\n\t\t\t\ttopologyData = await topologyResponse.json();\n\t\t\t}\n\t\t\t\n\t\t\tlastRefresh = new Date();\n\t\t} catch (error) {\n\t\t\tconsole.error('Failed to refresh data:', error);\n\t\t} finally {\n\t\t\trefreshing = false;\n\t\t}\n\t}\n\t\n\tasync function handleFailover(nodeId) {\n\t\tif (!confirm(`Promote ${nodeId} to primary?`)) return;\n\t\t\n\t\ttry {\n\t\t\tconst response = await fetch('/api/cluster/failover', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\t\tbody: JSON.stringify({ target_node: nodeId })\n\t\t\t});\n\t\t\t\n\t\t\tconst result = await response.json();\n\t\t\tif (result.success) {\n\t\t\t\talert('Failover initiated successfully');\n\t\t\t\tawait refreshData();\n\t\t\t} else {\n\t\t\t\talert(`Failover failed: ${result.error}`);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\talert(`Failover request failed: ${error.message}`);\n\t\t}\n\t}\n</script>\n\n<main class=\"orchestrator-app\">\n\t<header class=\"app-header\">\n\t\t<div class=\"header-content\">\n\t\t\t<h1>🎯 HMSSQL Database Orchestrator</h1>\n\t\t\t<p>Real-time cluster monitoring and management</p>\n\t\t\t<div class=\"header-actions\">\n\t\t\t\t<button \n\t\t\t\t\tclass=\"refresh-btn\" \n\t\t\t\t\tclass:refreshing \n\t\t\t\t\ton:click={refreshData}\n\t\t\t\t\tdisabled={refreshing}\n\t\t\t\t>\n\t\t\t\t\t{refreshing ? '🔄 Refreshing...' : '🔄 Refresh'}\n\t\t\t\t</button>\n\t\t\t\t{#if lastRefresh}\n\t\t\t\t\t<span class=\"last-refresh\">\n\t\t\t\t\t\tLast updated: {lastRefresh.toLocaleTimeString()}\n\t\t\t\t\t</span>\n\t\t\t\t{/if}\n\t\t\t</div>\n\t\t</div>\n\t</header>\n\n\t<div class=\"dashboard-container\">\n\t\t<!-- Cluster Overview -->\n\t\t<section class=\"overview-section\">\n\t\t\t<ClusterOverview \n\t\t\t\t{clusterData} \n\t\t\t\ttotalNodes={Object.keys(clusterData.nodes || {}).length}\n\t\t\t/>\n\t\t</section>\n\n\t\t<!-- Metrics Panel -->\n\t\t<section class=\"metrics-section\">\n\t\t\t<MetricsPanel \n\t\t\t\tmetrics={clusterData.metrics || {}}\n\t\t\t\thealthSummary={clusterData.health_summary || {}}\n\t\t\t/>\n\t\t</section>\n\n\t\t<!-- Topology Visualization -->\n\t\t<section class=\"topology-section full-width\">\n\t\t\t<TopologyGraph \n\t\t\t\tdata={topologyData}\n\t\t\t\tonNodeClick={(nodeId) => console.log('Clicked node:', nodeId)}\n\t\t\t/>\n\t\t</section>\n\n\t\t<!-- Node Grid -->\n\t\t<section class=\"nodes-section full-width\">\n\t\t\t<NodeGrid \n\t\t\t\tnodes={clusterData.nodes || {}}\n\t\t\t\t{serverStats}\n\t\t\t\tonFailover={handleFailover}\n\t\t\t/>\n\t\t</section>\n\n\t\t<!-- Log Viewer -->\n\t\t<section class=\"logs-section full-width\">\n\t\t\t<LogViewer />\n\t\t</section>\n\t</div>\n</main>\n\n<style>\n\t.orchestrator-app {\n\t\tmin-height: 100vh;\n\t\tbackground: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n\t\tpadding: 0;\n\t\tmargin: 0;\n\t}\n\n\t.app-header {\n\t\tbackground: rgba(255, 255, 255, 0.95);\n\t\tbackdrop-filter: blur(10px);\n\t\tborder-bottom: 1px solid rgba(255, 255, 255, 0.2);\n\t\tpadding: 20px;\n\t\tbox-shadow: 0 2px 20px rgba(0, 0, 0, 0.1);\n\t}\n\n\t.header-content {\n\t\tmax-width: 1400px;\n\t\tmargin: 0 auto;\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t\tflex-wrap: wrap;\n\t\tgap: 20px;\n\t}\n\n\t.header-content h1 {\n\t\tmargin: 0;\n\t\tbackground: linear-gradient(45deg, #667eea, #764ba2);\n\t\t-webkit-background-clip: text;\n\t\t-webkit-text-fill-color: transparent;\n\t\tbackground-clip: text;\n\t\tfont-size: 2rem;\n\t}\n\n\t.header-content p {\n\t\tmargin: 5px 0 0 0;\n\t\tcolor: #666;\n\t\tfont-size: 1rem;\n\t}\n\n\t.header-actions {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 15px;\n\t}\n\n\t.refresh-btn {\n\t\tbackground: #007bff;\n\t\tcolor: white;\n\t\tborder: none;\n\t\tpadding: 10px 20px;\n\t\tborder-radius: 8px;\n\t\tcursor: pointer;\n\t\tfont-weight: 600;\n\t\ttransition: all 0.2s ease;\n\t}\n\n\t.refresh-btn:hover:not(:disabled) {\n\t\tbackground: #0056b3;\n\t\ttransform: translateY(-1px);\n\t}\n\n\t.refresh-btn:disabled {\n\t\topacity: 0.6;\n\t\tcursor: not-allowed;\n\t}\n\n\t.refresh-btn.refreshing {\n\t\tanimation: spin 1s linear infinite;\n\t}\n\n\t@keyframes spin {\n\t\tfrom { transform: rotate(0deg); }\n\t\tto { transform: rotate(360deg); }\n\t}\n\n\t.last-refresh {\n\t\tcolor: #666;\n\t\tfont-size: 0.9rem;\n\t}\n\n\t.dashboard-container {\n\t\tmax-width: 1400px;\n\t\tmargin: 0 auto;\n\t\tpadding: 20px;\n\t\tdisplay: grid;\n\t\tgrid-template-columns: 1fr 1fr;\n\t\tgap: 20px;\n\t}\n\n\t.overview-section, .metrics-section {\n\t\tmin-height: 200px;\n\t}\n\n\t.full-width {\n\t\tgrid-column: 1 / -1;\n\t}\n\n\t.topology-section, .nodes-section, .logs-section {\n\t\tmin-height: 300px;\n\t}\n\n\t@media (max-width: 768px) {\n\t\t.dashboard-container {\n\t\t\tgrid-template-columns: 1fr;\n\t\t\tpadding: 15px;\n\t\t}\n\t\t\n\t\t.header-content {\n\t\t\ttext-align: center;\n\t\t}\n\t\t\n\t\t.header-content h1 {\n\t\t\tfont-size: 1.5rem;\n\t\t}\n\t}\n</style>\n","import App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.body,\n\tprops: {\n\t\tname: 'HMSSQL Orchestrator'\n\t}\n});\n\nexport default app;\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","document","createElement","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_data","set_style","key","important","style","removeProperty","setProperty","toggle_class","toggle","classList","current_component","set_current_component","component","onMount","Error","get_current_component","$$","on_mount","push","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","seen_callbacks","Set","flushidx","flush","saved_component","length","update","e","pop","i","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","transition_in","block","local","delete","transition_out","o","outros","c","d","ensure_array_like","array_like_or_iterator","undefined","Array","from","destroy_block","lookup","create_component","mount_component","m","new_on_destroy","map","filter","on_destroy","destroy_component","detaching","filtered","targets","indexOf","flush_render_callbacks","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","context","Map","callbacks","skip_bound","root","ready","ret","rest","hydrate","nodes","childNodes","children","l","intro","SvelteComponent","$$set","$destroy","this","$on","type","index","splice","$set","obj","keys","toFixed","t18_value","toUpperCase","div6","div16","h2","div15","div4","div0","div3","h30","div1","div2","div9","div5","div8","h31","div7","div14","div10","div13","h32","div11","div12","t15","t15_value","t18","clusterData","$$props","totalNodes","$$invalidate","healthSummary","health_summary","healthyNodes","healthy_nodes","healthPercentage","health_percentage","status","topology","window","__svelte","v","get_key","node_id","div","old_blocks","dynamic","list","destroy","create_each_block","next","get_context","n","old_indexes","new_blocks","new_lookup","deltas","updates","child_ctx","get","set","Math","abs","will_move","did_move","first","new_block","old_block","new_key","old_key","stats","performance","cpu_usage","memory_usage","span0","span1","span2","span3","t2","t2_value","t7","t7_value","button","t0_value","role","t6_value","host","t8_value","port","health","formatUptime","uptime","connections","raft_state","replication_lag","if_block0","create_if_block_3","create_if_block_1","create_if_block_2","getRoleClass","getHealthClass","span4","span5","span6","span7","span8","span9","span10","span11","t0","t6","t8","t12","t12_value","t16","t16_value","t20","t20_value","t24","t24_value","t28","t28_value","create_if_block","serverStats","onFailover","nodeList","entries","id","t25_value","formatTime","div13_data_health_value","div19","div18","div17","t25","isoString","Date","toLocaleTimeString","metrics","discoveryRuns","discovery_runs","failovers","failovers_executed","lastDiscovery","last_discovery","total_nodes_discovered","failedNodes","failed_nodes","container","onNodeClick","updateTopology","innerHTML","svg","createElementNS","textContent","radius","angle","PI","x","cos","y","sin","circle","cursor","split","slice","pointerEvents","infoText","edges","edge","fromNode","find","toNode","to","fromIndex","toIndex","fromAngle","toAngle","fromX","fromY","toX","toY","line","firstChild","$$value","iterations","formatTimestamp","timestamp","level","t4_value","message","getLevelClass","t4","logs","loading","generateSampleLogs","sampleEvents","toISOString","now","setTimeout","t1_value","span","t1","main","header","h1","section0","section1","section2","section3","section4","clusteroverview_changes","metricspanel_changes","nodegrid_changes","topologyData","refreshing","lastRefresh","refreshData","clusterResponse","fetch","ok","json","statsResponse","topologyResponse","error","console","interval","setInterval","clearInterval","async","nodeId","confirm","response","method","headers","body","JSON","stringify","target_node","result","success","alert","log"],"mappings":"gCACO,SAASA,IAAS,CAsClB,SAASC,EAAIC,GACnB,OAAOA,GACR,CAEO,SAASC,IACf,OAAOC,OAAOC,OAAO,KACtB,CAMO,SAASC,EAAQC,GACvBA,EAAIC,QAAQP,EACb,CAMO,SAASQ,EAAYC,GAC3B,MAAwB,mBAAVA,CACf,CAGO,SAASC,EAAeC,EAAGC,GACjC,OAAOD,GAAKA,EAAIC,GAAKA,EAAID,IAAMC,GAAMD,GAAkB,iBAANA,GAAgC,mBAANA,CAC5E,CC4EO,SAASE,EAAOC,EAAQC,GAC9BD,EAAOE,YAAYD,EACpB,CA8FO,SAASE,EAAOH,EAAQC,EAAMG,GACpCJ,EAAOK,aAAaJ,EAAMG,GAAU,KACrC,CAoBO,SAASE,EAAOL,GAClBA,EAAKM,YACRN,EAAKM,WAAWC,YAAYP,EAE9B,CAeO,SAASQ,EAAQC,GACvB,OAAOC,SAASC,cAAcF,EAC/B,CA+CO,SAASG,EAAKC,GACpB,OAAOH,SAASI,eAAeD,EAChC,CAIO,SAASE,IACf,OAAOH,EAAK,IACb,CAuBO,SAASI,EAAOhB,EAAMiB,EAAOC,EAASC,GAE5C,OADAnB,EAAKoB,iBAAiBH,EAAOC,EAASC,GAC/B,IAAMnB,EAAKqB,oBAAoBJ,EAAOC,EAASC,EACvD,CAwDO,SAASG,EAAKtB,EAAMuB,EAAWC,GACxB,MAATA,EAAexB,EAAKyB,gBAAgBF,GAC/BvB,EAAK0B,aAAaH,KAAeC,GAAOxB,EAAK2B,aAAaJ,EAAWC,EAC/E,CAmZO,SAASI,EAAShB,EAAMC,GAC9BA,EAAO,GAAKA,EACRD,EAAKC,OAASA,IAClBD,EAAKC,KAA8B,EACpC,CA6CO,SAASgB,EAAU7B,EAAM8B,EAAKN,EAAOO,GAC9B,MAATP,EACHxB,EAAKgC,MAAMC,eAAeH,GAE1B9B,EAAKgC,MAAME,YAAYJ,EAAKN,EAAOO,EAAY,YAAc,GAE/D,CA0HO,SAASI,EAAa3B,EAASC,EAAM2B,GAE3C5B,EAAQ6B,UAAUD,OAAO3B,IAAQ2B,EAClC,CC1+BO,IAAIE,EAGJ,SAASC,EAAsBC,GACrCF,EAAoBE,CACrB,CAkCO,SAASC,EAAQvD,IAhCjB,WACN,IAAKoD,EAAmB,MAAM,IAAII,MAAM,oDACxC,OAAOJ,CACR,EA8BCK,GAAwBC,GAAGC,SAASC,KAAK5D,EAC1C,CCxCO,MAAM6D,EAAmB,GAEnBC,EAAoB,GAEjC,IAAIC,EAAmB,GAEvB,MAAMC,EAAkB,GAElBC,EAAmCC,QAAQC,UAEjD,IAAIC,GAAmB,EAiBhB,SAASC,EAAoBrE,GACnC+D,EAAiBH,KAAK5D,EACvB,CAyBA,MAAMsE,EAAiB,IAAIC,IAE3B,IAAIC,EAAW,EAGR,SAASC,IAIf,GAAiB,IAAbD,EACH,OAED,MAAME,EAAkBtB,EACxB,EAAG,CAGF,IACC,KAAOoB,EAAWX,EAAiBc,QAAQ,CAC1C,MAAMrB,EAAYO,EAAiBW,GACnCA,IACAnB,EAAsBC,GACtBsB,EAAOtB,EAAUI,GACjB,CACD,CAAC,MAAOmB,GAIR,MAFAhB,EAAiBc,OAAS,EAC1BH,EAAW,EACLK,CACN,CAID,IAHAxB,EAAsB,MACtBQ,EAAiBc,OAAS,EAC1BH,EAAW,EACJV,EAAkBa,QAAQb,EAAkBgB,KAAlBhB,GAIjC,IAAK,IAAIiB,EAAI,EAAGA,EAAIhB,EAAiBY,OAAQI,GAAK,EAAG,CACpD,MAAMC,EAAWjB,EAAiBgB,GAC7BT,EAAeW,IAAID,KAEvBV,EAAeY,IAAIF,GACnBA,IAED,CACDjB,EAAiBY,OAAS,CAC5B,OAAUd,EAAiBc,QAC1B,KAAOX,EAAgBW,QACtBX,EAAgBc,KAAhBd,GAEDI,GAAmB,EACnBE,EAAea,QACf9B,EAAsBqB,EACvB,CAGA,SAASE,EAAOlB,GACf,GAAoB,OAAhBA,EAAG0B,SAAmB,CACzB1B,EAAGkB,SACHxE,EAAQsD,EAAG2B,eACX,MAAMC,EAAQ5B,EAAG4B,MACjB5B,EAAG4B,MAAQ,EAAE,GACb5B,EAAG0B,UAAY1B,EAAG0B,SAASG,EAAE7B,EAAG8B,IAAKF,GACrC5B,EAAG+B,aAAanF,QAAQ+D,EACxB,CACF,CCtFA,MAAMqB,EAAW,IAAInB,IA+Bd,SAASoB,EAAcC,EAAOC,GAChCD,GAASA,EAAMb,IAClBW,EAASI,OAAOF,GAChBA,EAAMb,EAAEc,GAEV,CASO,SAASE,EAAeH,EAAOC,EAAO1E,EAAQ6D,GACpD,GAAIY,GAASA,EAAMI,EAAG,CACrB,GAAIN,EAAST,IAAIW,GAAQ,OACzBF,EAASR,IAAIU,GA3CXK,UA4CKC,EAAEtC,KAAK,KACb8B,EAASI,OAAOF,GACZZ,IACC7D,GAAQyE,EAAMO,EAAE,GACpBnB,OAGFY,EAAMI,EAAEH,EACR,MAAUb,GACVA,GAEF,CC1FO,SAASoB,EAAkBC,GACjC,YAA0CC,IAAnCD,GAAwB1B,OAC5B0B,EACAE,MAAMC,KAAKH,EACf,CAKO,SAASI,EAAcb,EAAOc,GACpCd,EAAMO,EAAE,GACRO,EAAOZ,OAAOF,EAAMhD,IACrB,CCcO,SAAS+D,EAAiBf,GAChCA,GAASA,EAAMM,GAChB,CAQO,SAASU,EAAgBtD,EAAWzC,EAAQI,GAClD,MAAMmE,SAAEA,EAAQK,aAAEA,GAAiBnC,EAAUI,GAC7C0B,GAAYA,EAASyB,EAAEhG,EAAQI,GAE/BoD,EAAoB,KACnB,MAAMyC,EAAiBxD,EAAUI,GAAGC,SAASoD,IAAIhH,GAAKiH,OAAOzG,GAIzD+C,EAAUI,GAAGuD,WAChB3D,EAAUI,GAAGuD,WAAWrD,QAAQkD,GAIhC1G,EAAQ0G,GAETxD,EAAUI,GAAGC,SAAW,KAEzB8B,EAAanF,QAAQ+D,EACtB,CAGO,SAAS6C,EAAkB5D,EAAW6D,GAC5C,MAAMzD,EAAKJ,EAAUI,GACD,OAAhBA,EAAG0B,YH+DD,SAAgC/E,GACtC,MAAM+G,EAAW,GACXC,EAAU,GAChBtD,EAAiBzD,QAAS4F,IAA2B,IAApB7F,EAAIiH,QAAQpB,GAAYkB,EAASxD,KAAKsC,GAAKmB,EAAQzD,KAAKsC,IACzFmB,EAAQ/G,QAAS4F,GAAMA,KACvBnC,EAAmBqD,CACpB,CGpEEG,CAAuB7D,EAAG+B,cAC1BrF,EAAQsD,EAAGuD,YACXvD,EAAG0B,UAAY1B,EAAG0B,SAASe,EAAEgB,GAG7BzD,EAAGuD,WAAavD,EAAG0B,SAAW,KAC9B1B,EAAG8B,IAAM,GAEX,CAGA,SAASgC,EAAWlE,EAAWyB,IACC,IAA3BzB,EAAUI,GAAG4B,MAAM,KACtBzB,EAAiBD,KAAKN,GH9DlBc,IACJA,GAAmB,EACnBH,EAAiBwD,KAAKhD,IG8DtBnB,EAAUI,GAAG4B,MAAMoC,KAAK,IAEzBpE,EAAUI,GAAG4B,MAAOP,EAAI,GAAM,IAAM,GAAKA,EAAI,EAC9C,CAaO,SAAS4C,EACfrE,EACArB,EACA2F,EACAC,EACAC,EACAC,EACAC,EAAgB,KAChB1C,EAAQ,EAAE,IAEV,MAAM2C,EAAmB7E,EACzBC,EAAsBC,GAEtB,MAAMI,EAAMJ,EAAUI,GAAK,CAC1B0B,SAAU,KACVI,IAAK,GAELuC,QACAnD,OAAQ9E,EACRgI,YACAI,MAAOjI,IAEP0D,SAAU,GACVsD,WAAY,GACZkB,cAAe,GACf9C,cAAe,GACfI,aAAc,GACd2C,QAAS,IAAIC,IAAIpG,EAAQmG,UAAYH,EAAmBA,EAAiBvE,GAAG0E,QAAU,KAEtFE,UAAWrI,IACXqF,QACAiD,YAAY,EACZC,KAAMvG,EAAQpB,QAAUoH,EAAiBvE,GAAG8E,MAE7CR,GAAiBA,EAActE,EAAG8E,MAClC,IAAIC,GAAQ,EAgBZ,GAfA/E,EAAG8B,IAAMoC,EACNA,EAAStE,EAAWrB,EAAQ8F,OAAS,CAAE,EAAE,CAAChD,EAAG2D,KAAQC,KACrD,MAAMrG,EAAQqG,EAAKhE,OAASgE,EAAK,GAAKD,EAKtC,OAJIhF,EAAG8B,KAAOsC,EAAUpE,EAAG8B,IAAIT,GAAKrB,EAAG8B,IAAIT,GAAKzC,MAC1CoB,EAAG6E,YAAc7E,EAAGwE,MAAMnD,IAAIrB,EAAGwE,MAAMnD,GAAGzC,GAC3CmG,GAAOjB,EAAWlE,EAAWyB,IAE3B2D,IAEP,GACHhF,EAAGkB,SACH6D,GAAQ,EACRrI,EAAQsD,EAAG2B,eAEX3B,EAAG0B,WAAWyC,GAAkBA,EAAgBnE,EAAG8B,KAC/CvD,EAAQpB,OAAQ,CACnB,GAAIoB,EAAQ2G,QAAS,CAIpB,MAAMC,EL4cF,SAAkBvH,GACxB,OAAOiF,MAAMC,KAAKlF,EAAQwH,WAC3B,CK9ciBC,CAAS9G,EAAQpB,QAC/B6C,EAAG0B,UAAY1B,EAAG0B,SAAS4D,EAAEH,GAC7BA,EAAMvI,QAAQa,EACjB,MAEGuC,EAAG0B,UAAY1B,EAAG0B,SAASc,IAExBjE,EAAQgH,OAAOtD,EAAcrC,EAAUI,GAAG0B,UAC9CwB,EAAgBtD,EAAWrB,EAAQpB,OAAQoB,EAAQhB,QAEnDwD,GACA,CACDpB,EAAsB4E,EACvB,CAySO,MAAMiB,EAQZxF,QAAK4C,EAQL6C,WAAQ7C,EAGR,QAAA8C,GACClC,EAAkBmC,KAAM,GACxBA,KAAKD,SAAWtJ,CAChB,CAQD,GAAAwJ,CAAIC,EAAMvE,GACT,IAAKzE,EAAYyE,GAChB,OAAOlF,EAER,MAAMwI,EAAYe,KAAK3F,GAAG4E,UAAUiB,KAAUF,KAAK3F,GAAG4E,UAAUiB,GAAQ,IAExE,OADAjB,EAAU1E,KAAKoB,GACR,KACN,MAAMwE,EAAQlB,EAAUhB,QAAQtC,IACjB,IAAXwE,GAAclB,EAAUmB,OAAOD,EAAO,GAE3C,CAMD,IAAAE,CAAK3B,GNrYC,IAAkB4B,EMsYnBN,KAAKF,QNtYcQ,EMsYK5B,ENrYM,IAA5B7H,OAAO0J,KAAKD,GAAKhF,UMsYtB0E,KAAK3F,GAAG6E,YAAa,EACrBc,KAAKF,MAAMpB,GACXsB,KAAK3F,GAAG6E,YAAa,EAEtB,sGC7dI/C,EAAgB,GAACqE,QAAQ,GAAC,GAECC,EAAAtE,KAAOuE,cAAW,8MAZpBvE,EAAU,yBACRA,EAAY,QAAC,iJASZ,qJAUHA,EAAQ,kbAXM7C,EAAAqH,EAAA,QAAAxE,KAAeA,EAAM,wdAjBlExE,EAiCMH,EAAAoJ,EAAAhJ,GAhCLL,EAA4BqJ,EAAAC,UAE5BtJ,EA6BMqJ,EAAAE,GA5BLvJ,EAOMuJ,EAAAC,GANLxJ,EAAkCwJ,EAAAC,UAClCzJ,EAIMwJ,EAAAE,GAHL1J,EAAoB0J,EAAAC,UACpB3J,EAA4C0J,EAAAE,iBAC5C5J,EAAwD0J,EAAAG,wBAI1D7J,EASMuJ,EAAAO,GARL9J,EAAiC8J,EAAAC,UACjC/J,EAMM8J,EAAAE,GALLhK,EAAuBgK,EAAAC,UACvBjK,EAEMgK,EAAAZ,wBACNpJ,EAAwDgK,EAAAE,iBAI1DlK,EAOMuJ,EAAAY,GANLnK,EAAiCmK,EAAAC,UACjCpK,EAIMmK,EAAAE,GAHLrK,EAAiBqK,EAAAC,UACjBtK,EAA0CqK,EAAAE,iBAC1CvK,EAAgDqK,EAAAG,sBArBrB5F,EAAU,cACRA,EAAY,gBASvCA,EAAgB,GAACqE,QAAQ,GAAC,KAAAnH,EAAA2I,EAAAC,QADa3I,EAAAqH,EAAA,QAAAxE,KAAeA,EAAM,KAGjC,EAAAF,GAAAwE,KAAAA,EAAAtE,KAAOuE,cAAW,KAAArH,EAAA6I,EAAAzB,YAQpBtE,EAAQ,yEA/C3BgG,GAAWC,cACXC,GAAUD,oIAElBE,EAAA,EAAAC,EAAgBJ,EAAYK,gBAAc,CAAA,uBAC1CC,EAAeF,EAAcG,eAAiB,uBAC9CC,EAAmBJ,EAAcK,mBAAqB,uBACtDC,EAASN,EAAcM,QAAU,8BACjCC,EAAWX,EAAYW,UAAY,uBAE7B,SAAeD,UACfA,OACF,gBAAkB,cAClB,iBAAmB,cACnB,iBAAmB,wBACR,iBCbG,oBAAXE,SAETA,OAAOC,WAAaD,OAAOC,SAAW,CAAEC,EAAG,IAAI/H,OAAU+H,EAAEpH,ICK/B,0LCmCpBM,EAAQ,IAAU,MAAA+G,EAAA/G,GAAAA,KAAKgH,wBAA5B7H,OAAII,GAAA,EAAA,6JADP/D,EAsEMH,EAAA4L,EAAAxL,sEArEEuE,EAAQ,MLLX,SACNkH,EACApH,EACAiH,EACAI,EACAnH,EACAoH,EACAlG,EACA5F,EACA+L,EACAC,EACAC,EACAC,GAEA,IAAIhH,EAAI0G,EAAW/H,OACfsI,EAAIL,EAAKjI,OACTI,EAAIiB,EACR,MAAMkH,EAAc,CAAA,EACpB,KAAOnI,KAAKmI,EAAYR,EAAW3H,GAAGnC,KAAOmC,EAC7C,MAAMoI,EAAa,GACbC,EAAa,IAAI/E,IACjBgF,EAAS,IAAIhF,IACbiF,EAAU,GAEhB,IADAvI,EAAIkI,EACGlI,KAAK,CACX,MAAMwI,EAAYP,EAAYxH,EAAKoH,EAAM7H,GACnCnC,EAAM2J,EAAQgB,GACpB,IAAI3H,EAAQc,EAAO8G,IAAI5K,GAClBgD,EAGM+G,GAEVW,EAAQ1J,KAAK,IAAMgC,EAAML,EAAEgI,EAAWjI,KAJtCM,EAAQkH,EAAkBlK,EAAK2K,GAC/B3H,EAAMM,KAKPkH,EAAWK,IAAI7K,EAAMuK,EAAWpI,GAAKa,GACjChD,KAAOsK,GAAaG,EAAOI,IAAI7K,EAAK8K,KAAKC,IAAI5I,EAAImI,EAAYtK,IACjE,CACD,MAAMgL,EAAY,IAAIrJ,IAChBsJ,EAAW,IAAItJ,IAErB,SAASvD,EAAO4E,GACfD,EAAcC,EAAO,GACrBA,EAAMiB,EAAE/F,EAAMiM,GACdrG,EAAO+G,IAAI7H,EAAMhD,IAAKgD,GACtBmH,EAAOnH,EAAMkI,MACbb,GACA,CACD,KAAOjH,GAAKiH,GAAG,CACd,MAAMc,EAAYZ,EAAWF,EAAI,GAC3Be,EAAYtB,EAAW1G,EAAI,GAC3BiI,EAAUF,EAAUnL,IACpBsL,EAAUF,EAAUpL,IACtBmL,IAAcC,GAEjBjB,EAAOgB,EAAUD,MACjB9H,IACAiH,KACWG,EAAWnI,IAAIiJ,IAIfxH,EAAOzB,IAAIgJ,IAAYL,EAAU3I,IAAIgJ,GAChDjN,EAAO+M,GACGF,EAAS5I,IAAIiJ,GACvBlI,IACUqH,EAAOG,IAAIS,GAAWZ,EAAOG,IAAIU,IAC3CL,EAAS3I,IAAI+I,GACbjN,EAAO+M,KAEPH,EAAU1I,IAAIgJ,GACdlI,MAXA6G,EAAQmB,EAAWtH,GACnBV,IAYD,CACD,KAAOA,KAAK,CACX,MAAMgI,EAAYtB,EAAW1G,GACxBoH,EAAWnI,IAAI+I,EAAUpL,MAAMiK,EAAQmB,EAAWtH,EACvD,CACD,KAAOuG,GAAGjM,EAAOmM,EAAWF,EAAI,IAEhC,OADA7M,EAAQkN,GACDH,CACR,6QKlFEnM,EAGMH,EAAA2J,EAAAvJ,sEA8C4BuE,EAAI,GAAC2I,MAAMC,YAAYC,WAAWxE,QAAQ,IAAM,GAAC,MAKjDrE,EAAI,GAAC2I,MAAMC,YAAYE,cAAczE,QAAQ,IAAM,GAAC,uFALF,uFAKG,2QAPlF7I,EAGMH,EAAAwJ,EAAApJ,GAFLL,EAAsCyJ,EAAAkE,UACtC3N,EAAsFyJ,EAAAmE,0BAGvFxN,EAGMH,EAAA2J,EAAAvJ,GAFLL,EAAyC4J,EAAAiE,UACzC7N,EAAyF4J,EAAAkE,sCAL7DlJ,EAAI,GAAC2I,MAAMC,YAAYC,WAAWxE,QAAQ,IAAM,GAAC,KAAAnH,EAAAiM,EAAAC,gBAKjDpJ,EAAI,GAAC2I,MAAMC,YAAYE,cAAczE,QAAQ,IAAM,GAAC,KAAAnH,EAAAmM,EAAAC,+JAgBjF9N,EAAkDH,EAAA4L,EAAAxL,6IAFlDD,EAAwCH,EAAA4L,EAAAxL,4LAPxCD,EAKSH,EAAAkO,EAAA9N,8MAzDY+N,GAAAxJ,KAAKgH,QAAO,OAEhChH,EAAI,GAACyJ,MAAQ,WAAS,GAOKC,GAAA1J,KAAK2J,KAAI,GAAGC,GAAA5J,KAAK6J,KAAI,OAKrB7J,EAAI,GAAC8J,QAAU,WAAS,MAKxBC,GAAa/J,EAAI,GAACgK,QAAM,OAKxBhK,EAAI,GAACiK,aAAe,GAAC,OAKrBjK,EAAI,GAACkK,YAAc,WAAS,OAK5BlK,EAAI,GAACmK,iBAAmB,GAAC,GAGjDC,GAAApK,KAAK2I,OAAS3I,EAAK,GAAA2I,MAAMC,aAAWyB,EAAArK,0BActB,YAAdA,EAAI,GAACyJ,MAAsC,YAAhBzJ,EAAI,GAAC8J,OAAoBQ,EAOjC,YAAdtK,EAAI,GAACyJ,KAAkBc,oNAjDM,ibAyBgB,0HAjChCC,GAAaxK,EAAI,GAACyJ,MAAI,66BAHxBgB,GAAezK,EAAI,GAAC8J,QAAM,wCAAjDtO,EAkEMH,EAAAsK,EAAAlK,GAjELL,EAKMuK,EAAAV,GAJL7J,EAAyC6J,EAAAJ,iBACzCzJ,EAEM6J,EAAAD,iBAGP5J,EA0CMuK,EAAAT,GAzCL9J,EAGM8J,EAAAJ,GAFL1J,EAAuC0J,EAAAiE,UACvC3N,EAAyD0J,EAAAkE,+BAG1D5N,EAGM8J,EAAAN,GAFLxJ,EAAyCwJ,EAAAqE,UACzC7N,EAA4DwJ,EAAAsE,iBAG7D9N,EAGM8J,EAAAC,GAFL/J,EAAyC+J,EAAAuF,UACzCtP,EAA6D+J,EAAAwF,iBAG9DvP,EAGM8J,EAAAV,GAFLpJ,EAA8CoJ,EAAAoG,UAC9CxP,EAAyDoJ,EAAAqG,iBAG1DzP,EAGM8J,EAAAI,GAFLlK,EAA6CkK,EAAAwF,UAC7C1P,EAAgEkK,EAAAyF,mBAGjE3P,EAGM8J,EAAAE,IAFLhK,EAA4CgK,GAAA4F,aAC5C5P,EAA+DgK,GAAA6F,uDAgBjE7P,EAaMuK,EAAAH,sCA/DiB,EAAA1F,GAAA0J,MAAAA,GAAAxJ,KAAKgH,QAAO,KAAA9J,EAAAgO,EAAA1B,mBAEhCxJ,EAAI,GAACyJ,MAAQ,WAAS,KAAAvM,EAAAiM,EAAAC,6BADDoB,GAAaxK,EAAI,GAACyJ,MAAI,mCAQhB,EAAA3J,GAAA4J,MAAAA,GAAA1J,KAAK2J,KAAI,KAAAzM,EAAAiO,EAAAzB,IAAG,EAAA5J,GAAA8J,MAAAA,GAAA5J,KAAK6J,KAAI,KAAA3M,EAAAkO,EAAAxB,mBAKrB5J,EAAI,GAAC8J,QAAU,WAAS,KAAA5M,EAAAmO,EAAAC,kBAKxBvB,GAAa/J,EAAI,GAACgK,QAAM,KAAA9M,EAAAqO,EAAAC,mBAKxBxL,EAAI,GAACiK,aAAe,GAAC,KAAA/M,EAAAuO,EAAAC,mBAKrB1L,EAAI,GAACkK,YAAc,WAAS,KAAAhN,EAAAyO,GAAAC,mBAK5B5L,EAAI,GAACmK,iBAAmB,GAAC,KAAAjN,EAAA2O,GAAAC,IAGjD9L,KAAK2I,OAAS3I,EAAK,GAAA2I,MAAMC,oLAvCT6B,GAAezK,EAAI,GAAC8J,QAAM,qHAR3B,IAApB9J,EAAQ,GAACb,OAAY4M,mLAH3BvQ,EAiFMH,EAAA4L,EAAAxL,GAhFLL,EAA2B6L,EAAAvC,8HAzBlB,SAAA+F,GAAeX,UACfA,OACF,gBAAkB,mBAClB,iBAAmB,oBACnB,eAAiB,4BACN,gBAIT,SAAAU,GAAaf,UACbA,OACF,gBAAkB,mBAClB,gBAAkB,mBAClB,eAAiB,4BACN,gBAIT,SAAAM,GAAaC,GAChB,OAAAA,EACM,IAAAA,EAAS,MAAM3F,QAAQ,MADd,qCA5BVhB,GAAK4C,eACL+F,GAAW/F,cACXgG,GAAUhG,gKAEpBE,EAAA,EAAE+F,EAAWxR,OAAOyR,QAAQ9I,GAAa,CAAA,GAAA9B,MAAM6K,EAAI9Q,MAChD,IAAAA,EACHqN,MAAOqD,EAAYI,IAAE,CAAA,mBA8FCH,EAAW3Q,EAAK0L,kNCzD2ChH,EAAgB,GAACqE,QAAQ,GAAC,GAKpEgI,EAAAC,GAAWtM,EAAa,IAAA,gKAzBnCA,EAAa,+EAKEA,EAAS,mFAKVA,EAAY,kFAKbA,EAAW,mFAKyD,wwBAAnDpD,EAAA6I,EAAA,cAAA8G,EAAAvM,KAAc0G,uSA1B1ElL,EAkCMH,EAAAmR,EAAA/Q,GAjCLL,EAA0BoR,EAAA9H,UAE1BtJ,EA8BMoR,EAAAC,GA7BLrR,EAGMqR,EAAAxH,GAFL7J,EAA8C6J,EAAAJ,UAC9CzJ,EAA+C6J,EAAAD,iBAGhD5J,EAGMqR,EAAAtH,GAFL/J,EAAyC+J,EAAAL,UACzC1J,EAA0D+J,EAAAP,iBAG3DxJ,EAGMqR,EAAArH,GAFLhK,EAA6CgK,EAAAZ,UAC7CpJ,EAA4DgK,EAAAE,iBAG7DlK,EAGMqR,EAAA9G,GAFLvK,EAA4CuK,EAAAT,UAC5C9J,EAA0DuK,EAAAH,iBAG3DpK,EAGMqR,EAAAlH,GAFLnK,EAAsCmK,EAAAK,UACtCxK,EAAmHmK,EAAAE,wBAGpHrK,EAGMqR,EAAAC,GAFLtR,EAA8CsR,EAAA/H,UAC9CvJ,EAAsEsR,EAAAjI,8BAzB3CzE,EAAa,cAKEA,EAAS,aAKVA,EAAY,aAKbA,EAAW,gBAK6BA,EAAgB,GAACqE,QAAQ,GAAC,KAAAnH,EAAAuO,EAAAC,GAAjD,EAAA5L,GAAAyM,KAAAA,EAAAvM,KAAc0G,8BAKjC,GAAA5G,GAAAuM,KAAAA,EAAAC,GAAWtM,EAAa,IAAA,KAAA9C,EAAAyP,EAAAN,2BArCvD,SAAAC,GAAWM,GACd,OAAAA,MACMC,KAAKD,GAAWE,qBADJ,oDAZbC,GAAO9G,iBACPG,GAAaH,uIAErB+G,EAAgBD,EAAQE,gBAAkB,uBAC1CC,EAAYH,EAAQI,oBAAsB,mBAC1ChH,EAAA,EAAAiH,EAAgBL,EAAQM,gCACXN,EAAQO,2CACrBhH,EAAeyG,EAAQxG,eAAiB,uBACxCgH,EAAcR,EAAQS,cAAgB,qBACtChH,EAAmBJ,EAAcK,mBAAqB,q9BC6H1DjL,EA2BMH,EAAAsK,EAAAlK,GA1BLL,EAA4BuK,EAAAjB,UAE5BtJ,EAmBMuK,EAAAT,UAEN9J,EAEMuK,EAAAH,yEA3JFiI,QALOtR,GAAI8J,eACJyH,EAAW,mBAgBbC,IACH,IAAAF,IAActR,IAASA,EAAKkH,MAAK,WAGtCoK,EAAUG,UAAY,GAAEH,GAGlB,MAAAI,EAAM7R,SAAS8R,gBAAgB,6BAA8B,OACnED,EAAI5Q,aAAa,QAAS,QAC1B4Q,EAAI5Q,aAAa,SAAU,OAC3B4Q,EAAI5Q,aAAa,UAAW,qBAEtBoG,EAAQlH,EAAKkH,OAAK,MACH,IAAjBA,EAAMlE,OAAY,CAEf,MAAAjD,EAAOF,SAAS8R,gBAAgB,6BAA8B,eACpE5R,EAAKe,aAAa,IAAK,OACvBf,EAAKe,aAAa,IAAK,OACvBf,EAAKe,aAAa,cAAe,UACjCf,EAAKe,aAAa,OAAQ,QAC1Bf,EAAKe,aAAa,YAAa,MAC/Bf,EAAK6R,YAAc,6BACnBF,EAAItS,YAAYW,QAChBuR,EAAUlS,YAAYsS,GAKjB,MAEAG,EAAS,IAEf3K,EAAMvI,QAAS,CAAAQ,EAAM0I,WACdiK,EAASjK,EAAQX,EAAMlE,OAAU,EAAI+I,KAAKgG,GAC1CC,EANS,IAMKjG,KAAKkG,IAAIH,GAASD,EAChCK,EANS,IAMKnG,KAAKoG,IAAIL,GAASD,EAGhCO,EAASvS,SAAS8R,gBAAgB,6BAA8B,UACtES,EAAOtR,aAAa,KAAMkR,GAC1BI,EAAOtR,aAAa,KAAMoR,GAC1BE,EAAOtR,aAAa,IAAK,MAGrB,IAAAiF,EAAO,UACO,mBAAd5G,EAAKmO,KAA2BvH,EAAO,UACpB,gBAAd5G,EAAKmO,KAAwBvH,EAAO,UACtB,YAAd5G,EAAKmO,OAAoBvH,EAAO,WAEzCqM,EAAOtR,aAAa,OAAQiF,GAC5BqM,EAAOtR,aAAa,SAAU,QAC9BsR,EAAOtR,aAAa,eAAgB,KACpCsR,EAAOjR,MAAMkR,OAAS,UAGtBD,EAAO7R,iBAAiB,YAAegR,EAAYpS,EAAK8Q,KAExDyB,EAAItS,YAAYgT,GAGV,MAAArS,EAAOF,SAAS8R,gBAAgB,6BAA8B,QACpE5R,EAAKe,aAAa,IAAKkR,GACvBjS,EAAKe,aAAa,IAAKoR,EAAI,GAC3BnS,EAAKe,aAAa,cAAe,UACjCf,EAAKe,aAAa,OAAQ,SAC1Bf,EAAKe,aAAa,YAAa,MAC/Bf,EAAKe,aAAa,cAAe,QACjCf,EAAK6R,YAAczS,EAAK8Q,GAAK9Q,EAAK8Q,GAAGqC,MAAM,KAAK,IAAMnT,EAAK8Q,GAAGsC,OAAO,GAAK,MAC1ExS,EAAKoB,MAAMqR,cAAgB,OAC3Bd,EAAItS,YAAYW,GAGV,MAAA0S,EAAW5S,SAAS8R,gBAAgB,6BAA8B,QACxEc,EAAS3R,aAAa,IAAKkR,GAC3BS,EAAS3R,aAAa,IAAKoR,EAAI,IAC/BO,EAAS3R,aAAa,cAAe,UACrC2R,EAAS3R,aAAa,OAAQ,QAC9B2R,EAAS3R,aAAa,YAAa,MACnC2R,EAASb,YAAczS,EAAKwO,QAAU,UACtC+D,EAAItS,YAAYqT,MAIHzS,EAAK0S,OAAK,IAClB/T,QAAQgU,IACP,MAAAC,EAAW1L,EAAM2L,KAAKvH,GAAKA,EAAE2E,KAAO0C,EAAK9N,MACzCiO,EAAS5L,EAAM2L,KAAKvH,GAAKA,EAAE2E,KAAO0C,EAAKI,IAEzC,GAAAH,GAAYE,EAAM,CACf,MAAAE,EAAY9L,EAAMvB,QAAQiN,GAC1BK,EAAU/L,EAAMvB,QAAQmN,GAExBI,EAAaF,EAAY9L,EAAMlE,OAAU,EAAI+I,KAAKgG,GAClDoB,EAAWF,EAAU/L,EAAMlE,OAAU,EAAI+I,KAAKgG,GAE9CqB,EAnEQ,IAmEUrH,KAAKkG,IAAIiB,GAAarB,EACxCwB,EAnEQ,IAmEUtH,KAAKoG,IAAIe,GAAarB,EACxCyB,EArEQ,IAqEQvH,KAAKkG,IAAIkB,GAAWtB,EACpC0B,EArEQ,IAqEQxH,KAAKoG,IAAIgB,GAAWtB,EAEpC2B,EAAO3T,SAAS8R,gBAAgB,6BAA8B,QACpE6B,EAAK1S,aAAa,KAAMsS,GACxBI,EAAK1S,aAAa,KAAMuS,GACxBG,EAAK1S,aAAa,KAAMwS,GACxBE,EAAK1S,aAAa,KAAMyS,GACxBC,EAAK1S,aAAa,SAAU,QAC5B0S,EAAK1S,aAAa,eAAgB,KAClC0S,EAAK1S,aAAa,UAAW,OAE7B4Q,EAAInS,aAAaiU,EAAM9B,EAAI+B,eAI7BnC,EAAUlS,YAAYsS,UAtHvB9P,EAAO,KAEN4P,oHANMxR,GAAQA,EAAKkH,OAASoK,GAC5BE,mDAqJ0CF,EAASoC,kLC9F3C7P,EAAI,yBAATb,OAAII,GAAA,uEZoRDrD,EAAK,iGYpRH8D,EAAI,YAATb,OAAII,GAAA,EAAA,2HAAJJ,sBZ2ME,SAAsB2Q,EAAYnO,GACxC,IAAK,IAAIpC,EAAI,EAAGA,EAAIuQ,EAAW3Q,OAAQI,GAAK,EACvCuQ,EAAWvQ,IAAIuQ,EAAWvQ,GAAGoB,EAAEgB,EAErC,wLYpNGnG,EAGMH,EAAA2J,EAAAvJ,kEAImBsU,GAAgB/P,EAAG,GAACgQ,WAAS,KAC5BhQ,EAAG,GAACiQ,MAAM1L,cAAW,GACnB2L,EAAAlQ,KAAImQ,QAAO,kPAHfC,GAAcpQ,EAAG,GAACiQ,OAAK,0BAA9CzU,EAIMH,EAAAyJ,EAAArJ,GAHLL,EAA4D0J,EAAAD,iBAC5DzJ,EAAsD0J,EAAAE,iBACtD5J,EAA4C0J,EAAAG,qCAFrB8K,GAAgB/P,EAAG,GAACgQ,WAAS,KAAA9S,EAAAgO,EAAA1B,eAC5BxJ,EAAG,GAACiQ,MAAM1L,cAAW,KAAArH,EAAAiM,EAAAC,GACnB,EAAAtJ,GAAAoQ,KAAAA,EAAAlQ,KAAImQ,QAAO,KAAAjT,EAAAmT,EAAAH,4BAHfE,GAAcpQ,EAAG,GAACiQ,OAAK,6FAZ9CjQ,EAAO,GAAG,KAAO,2BAKE,IAAhBA,EAAI,GAACb,OAAY4M,mIALC,yHAFZ/L,EAAO,0JAPpBxE,EA6BMH,EAAA4J,EAAAxJ,GA5BLL,EAUM6J,EAAAJ,GATLzJ,EAAyByJ,EAAAH,UACzBtJ,EAOSyJ,EAAA0E,wBAGVnO,EAeM6J,EAAAD,iCAtBMhF,EAAW,gCAGpBA,EAAO,GAAG,KAAO,MAAG9C,EAAAiM,EAAAC,oBAFXpJ,EAAO,oIA9BV,SAAA+P,GAAgBnD,cACbC,KAAKD,GAAWE,qBAGnB,SAAAsD,GAAcH,UACdA,OACF,cAAgB,gBAChB,gBAAkB,kBAClB,aAAe,yBACJ,sCA5BdK,EAAI,GACJC,GAAU,WAOLC,UACFC,EAAY,EACfR,MAAO,OAAQE,QAAS,yBAA0BH,WAAS,IAAMnD,MAAO6D,gBACxET,MAAO,OAAQE,QAAS,2BAA4BH,UAAS,IAAMnD,KAAKA,KAAK8D,MAAQ,KAAOD,gBAC5FT,MAAO,UAAWE,QAAS,yCAA0CH,UAAS,IAAMnD,KAAKA,KAAK8D,MAAQ,KAAOD,gBAC7GT,MAAO,OAAQE,QAAS,gCAAiCH,UAAS,IAAMnD,KAAKA,KAAK8D,MAAQ,KAAOD,gBACjGT,MAAO,OAAQE,QAAS,uCAAwCH,UAAS,IAAMnD,KAAKA,KAAK8D,MAAQ,MAAQD,gBAE5GvK,EAAA,EAAAmK,EAAOG,UAbR1S,EAAO,KAENyS,sBA4BArK,EAAA,EAAAoK,GAAU,GAEVK,gBACCJ,IACArK,EAAA,EAAAoK,GAAU,IACR,gGC0DgBM,EAAA7Q,KAAY8M,qBAAkB,8BADnB,2EAA3BtR,EAEOH,EAAAyV,EAAArV,yBADS,GAAAqE,GAAA+Q,KAAAA,EAAA7Q,KAAY8M,qBAAkB,KAAA5P,EAAA6T,EAAAF,oGAJ7C7Q,EAAU,GAAG,mBAAqB,eAE/BA,EAAW,IAAA+L,GAAA/L,2CAcJkG,WAAAxL,OAAO0J,KAAKpE,EAAY,GAAAqD,WAAalE,2BAOxC4N,QAAA/M,KAAY+M,SAAO,CAAA,EACb3G,cAAApG,KAAYqG,gBAAc,CAAA,2BAOnCrG,EAAY,wCAQXqD,MAAArD,KAAYqD,OAAK,CAAA,8BAEZrD,EAAc,8iBA3CfA,EAAU,ggBAVzBxE,EA8DOH,EAAA2V,EAAAvV,GA7DNL,EAoBS4V,EAAAC,GAnBR7V,EAkBM6V,EAAAjM,GAjBL5J,EAAwC4J,EAAAkM,UACxC9V,EAAkD4J,EAAAjF,UAClD3E,EAcM4J,EAAAH,GAbLzJ,EAOSyJ,EAAA0E,uCAUZnO,EAsCM4V,EAAA/L,GApCL7J,EAKU6J,EAAAkM,sBAGV/V,EAKU6J,EAAAmM,sBAGVhW,EAKU6J,EAAAoM,sBAGVjW,EAMU6J,EAAAqM,sBAGVlW,EAEU6J,EAAAsM,sCAnDGvR,EAAW,sCAGpBA,EAAU,GAAG,mBAAqB,eAAY9C,EAAAmT,EAAAH,0BAFrClQ,EAAU,sCAIhBA,EAAW,kGAcJ,EAAAF,IAAA0R,EAAAtL,WAAAxL,OAAO0J,KAAKpE,EAAY,GAAAqD,WAAalE,6BAOxC,EAAAW,IAAA2R,EAAA1E,QAAA/M,KAAY+M,SAAO,IACb,EAAAjN,IAAA2R,EAAArL,cAAApG,KAAYqG,gBAAc,sCAOnCrG,EAAY,yBAQX,EAAAF,IAAA4R,EAAArO,MAAArD,KAAYqD,OAAK,mVA9HvB2C,EAAW,CACd3C,MAAK,CAAA,EACL0J,QAAO,CAAA,EACP1G,eAAc,CAAA,EACdM,SAAU,WAGPqF,EAAW,CAAA,EACX2F,EAAY,CAAKtO,MAAK,GAAMwL,MAAK,IACjC+C,GAAa,EACbC,EAAc,oBAWHC,QACVF,GACJzL,EAAA,EAAAyL,GAAa,aAING,QAAwBC,MAAM,uBAChCD,EAAgBE,QACnBjM,QAAoB+L,EAAgBG,cAI/BC,QAAsBH,MAAM,sBAC9BG,EAAcF,QACjBjG,QAAoBmG,EAAcD,cAI7BE,QAAyBJ,MAAM,uBACjCI,EAAiBH,QACpBN,QAAqBS,EAAiBF,QAGvC/L,EAAA,EAAA0L,MAAkBhF,YACVwF,GACRC,QAAQD,MAAM,0BAA2BA,WAEzClM,EAAA,EAAAyL,GAAa,GA1BA,EAPf7T,EAAO,KACN+T,IACM,MAAAS,EAAWC,YAAYV,EAJR,KAKR,MAAA,IAAAW,cAAcF,wBAkCbG,eAAeC,GACxB,GAAAC,mBAAmBD,2BAGjBE,QAAiBb,MAAM,wBAAuB,CACnDc,OAAQ,OACRC,QAAO,CAAI,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAY,CAAAC,YAAaR,MAG/BS,QAAeP,EAASX,OAC1BkB,EAAOC,SACVC,MAAM,yCACAxB,KAENwB,MAAK,oBAAqBF,EAAOf,eAE1BA,GACRiB,MAAK,4BAA6BjB,EAAMlC,aAiDzBwC,GAAWL,QAAQiB,IAAI,gBAAiBZ,WC7H9C,kEAAQ,CACnBtX,OAAQW,SAASgX,KACjBzQ,MAAO,CACNxG,KAAM"}